/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/archiver-utils";
exports.ids = ["vendor-chunks/archiver-utils"];
exports.modules = {

/***/ "(rsc)/./node_modules/archiver-utils/file.js":
/*!*********************************************!*\
  !*** ./node_modules/archiver-utils/file.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * archiver-utils\n *\n * Copyright (c) 2012-2014 Chris Talkington, contributors.\n * Licensed under the MIT license.\n * https://github.com/archiverjs/node-archiver/blob/master/LICENSE-MIT\n */ var fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/./node_modules/graceful-fs/graceful-fs.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar flatten = __webpack_require__(/*! lodash/flatten */ \"lodash/flatten\");\nvar difference = __webpack_require__(/*! lodash/difference */ \"lodash/difference\");\nvar union = __webpack_require__(/*! lodash/union */ \"lodash/union\");\nvar isPlainObject = __webpack_require__(/*! lodash/isPlainObject */ \"lodash/isPlainObject\");\nvar glob = __webpack_require__(/*! glob */ \"(rsc)/./node_modules/glob/dist/commonjs/index.js\");\nvar file = module.exports = {};\nvar pathSeparatorRe = /[\\/\\\\]/g;\n// Process specified wildcard glob patterns or filenames against a\n// callback, excluding and uniquing files in the result set.\nvar processPatterns = function(patterns, fn) {\n    // Filepaths to return.\n    var result = [];\n    // Iterate over flattened patterns array.\n    flatten(patterns).forEach(function(pattern) {\n        // If the first character is ! it should be omitted\n        var exclusion = pattern.indexOf(\"!\") === 0;\n        // If the pattern is an exclusion, remove the !\n        if (exclusion) {\n            pattern = pattern.slice(1);\n        }\n        // Find all matching files for this pattern.\n        var matches = fn(pattern);\n        if (exclusion) {\n            // If an exclusion, remove matching files.\n            result = difference(result, matches);\n        } else {\n            // Otherwise add matching files.\n            result = union(result, matches);\n        }\n    });\n    return result;\n};\n// True if the file path exists.\nfile.exists = function() {\n    var filepath = path.join.apply(path, arguments);\n    return fs.existsSync(filepath);\n};\n// Return an array of all file paths that match the given wildcard patterns.\nfile.expand = function(...args) {\n    // If the first argument is an options object, save those options to pass\n    // into the File.prototype.glob.sync method.\n    var options = isPlainObject(args[0]) ? args.shift() : {};\n    // Use the first argument if it's an Array, otherwise convert the arguments\n    // object to an array and use that.\n    var patterns = Array.isArray(args[0]) ? args[0] : args;\n    // Return empty set if there are no patterns or filepaths.\n    if (patterns.length === 0) {\n        return [];\n    }\n    // Return all matching filepaths.\n    var matches = processPatterns(patterns, function(pattern) {\n        // Find all matching files for this pattern.\n        return glob.sync(pattern, options);\n    });\n    // Filter result set?\n    if (options.filter) {\n        matches = matches.filter(function(filepath) {\n            filepath = path.join(options.cwd || \"\", filepath);\n            try {\n                if (typeof options.filter === \"function\") {\n                    return options.filter(filepath);\n                } else {\n                    // If the file is of the right type and exists, this should work.\n                    return fs.statSync(filepath)[options.filter]();\n                }\n            } catch (e) {\n                // Otherwise, it's probably not the right type.\n                return false;\n            }\n        });\n    }\n    return matches;\n};\n// Build a multi task \"files\" object dynamically.\nfile.expandMapping = function(patterns, destBase, options) {\n    options = Object.assign({\n        rename: function(destBase, destPath) {\n            return path.join(destBase || \"\", destPath);\n        }\n    }, options);\n    var files = [];\n    var fileByDest = {};\n    // Find all files matching pattern, using passed-in options.\n    file.expand(options, patterns).forEach(function(src) {\n        var destPath = src;\n        // Flatten?\n        if (options.flatten) {\n            destPath = path.basename(destPath);\n        }\n        // Change the extension?\n        if (options.ext) {\n            destPath = destPath.replace(/(\\.[^\\/]*)?$/, options.ext);\n        }\n        // Generate destination filename.\n        var dest = options.rename(destBase, destPath, options);\n        // Prepend cwd to src path if necessary.\n        if (options.cwd) {\n            src = path.join(options.cwd, src);\n        }\n        // Normalize filepaths to be unix-style.\n        dest = dest.replace(pathSeparatorRe, \"/\");\n        src = src.replace(pathSeparatorRe, \"/\");\n        // Map correct src path to dest path.\n        if (fileByDest[dest]) {\n            // If dest already exists, push this src onto that dest's src array.\n            fileByDest[dest].src.push(src);\n        } else {\n            // Otherwise create a new src-dest file mapping object.\n            files.push({\n                src: [\n                    src\n                ],\n                dest: dest\n            });\n            // And store a reference for later use.\n            fileByDest[dest] = files[files.length - 1];\n        }\n    });\n    return files;\n};\n// reusing bits of grunt's multi-task source normalization\nfile.normalizeFilesArray = function(data) {\n    var files = [];\n    data.forEach(function(obj) {\n        var prop;\n        if (\"src\" in obj || \"dest\" in obj) {\n            files.push(obj);\n        }\n    });\n    if (files.length === 0) {\n        return [];\n    }\n    files = _(files).chain().forEach(function(obj) {\n        if (!(\"src\" in obj) || !obj.src) {\n            return;\n        }\n        // Normalize .src properties to flattened array.\n        if (Array.isArray(obj.src)) {\n            obj.src = flatten(obj.src);\n        } else {\n            obj.src = [\n                obj.src\n            ];\n        }\n    }).map(function(obj) {\n        // Build options object, removing unwanted properties.\n        var expandOptions = Object.assign({}, obj);\n        delete expandOptions.src;\n        delete expandOptions.dest;\n        // Expand file mappings.\n        if (obj.expand) {\n            return file.expandMapping(obj.src, obj.dest, expandOptions).map(function(mapObj) {\n                // Copy obj properties to result.\n                var result = Object.assign({}, obj);\n                // Make a clone of the orig obj available.\n                result.orig = Object.assign({}, obj);\n                // Set .src and .dest, processing both as templates.\n                result.src = mapObj.src;\n                result.dest = mapObj.dest;\n                // Remove unwanted properties.\n                [\n                    \"expand\",\n                    \"cwd\",\n                    \"flatten\",\n                    \"rename\",\n                    \"ext\"\n                ].forEach(function(prop) {\n                    delete result[prop];\n                });\n                return result;\n            });\n        }\n        // Copy obj properties to result, adding an .orig property.\n        var result = Object.assign({}, obj);\n        // Make a clone of the orig obj available.\n        result.orig = Object.assign({}, obj);\n        if (\"src\" in result) {\n            // Expose an expand-on-demand getter method as .src.\n            Object.defineProperty(result, \"src\", {\n                enumerable: true,\n                get: function fn() {\n                    var src;\n                    if (!(\"result\" in fn)) {\n                        src = obj.src;\n                        // If src is an array, flatten it. Otherwise, make it into an array.\n                        src = Array.isArray(src) ? flatten(src) : [\n                            src\n                        ];\n                        // Expand src files, memoizing result.\n                        fn.result = file.expand(expandOptions, src);\n                    }\n                    return fn.result;\n                }\n            });\n        }\n        if (\"dest\" in result) {\n            result.dest = obj.dest;\n        }\n        return result;\n    }).flatten().value();\n    return files;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/archiver-utils/file.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/archiver-utils/index.js":
/*!**********************************************!*\
  !*** ./node_modules/archiver-utils/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * archiver-utils\n *\n * Copyright (c) 2015 Chris Talkington.\n * Licensed under the MIT license.\n * https://github.com/archiverjs/archiver-utils/blob/master/LICENSE\n */ var fs = __webpack_require__(/*! graceful-fs */ \"(rsc)/./node_modules/graceful-fs/graceful-fs.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar isStream = __webpack_require__(/*! is-stream */ \"(rsc)/./node_modules/is-stream/index.js\");\nvar lazystream = __webpack_require__(/*! lazystream */ \"(rsc)/./node_modules/lazystream/lib/lazystream.js\");\nvar normalizePath = __webpack_require__(/*! normalize-path */ \"(rsc)/./node_modules/normalize-path/index.js\");\nvar defaults = __webpack_require__(/*! lodash/defaults */ \"lodash/defaults\");\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nvar PassThrough = (__webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/lib/ours/index.js\").PassThrough);\nvar utils = module.exports = {};\nutils.file = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/archiver-utils/file.js\");\nutils.collectStream = function(source, callback) {\n    var collection = [];\n    var size = 0;\n    source.on(\"error\", callback);\n    source.on(\"data\", function(chunk) {\n        collection.push(chunk);\n        size += chunk.length;\n    });\n    source.on(\"end\", function() {\n        var buf = Buffer.alloc(size);\n        var offset = 0;\n        collection.forEach(function(data) {\n            data.copy(buf, offset);\n            offset += data.length;\n        });\n        callback(null, buf);\n    });\n};\nutils.dateify = function(dateish) {\n    dateish = dateish || new Date();\n    if (dateish instanceof Date) {\n        dateish = dateish;\n    } else if (typeof dateish === \"string\") {\n        dateish = new Date(dateish);\n    } else {\n        dateish = new Date();\n    }\n    return dateish;\n};\n// this is slightly different from lodash version\nutils.defaults = function(object, source, guard) {\n    var args = arguments;\n    args[0] = args[0] || {};\n    return defaults(...args);\n};\nutils.isStream = function(source) {\n    return isStream(source);\n};\nutils.lazyReadStream = function(filepath) {\n    return new lazystream.Readable(function() {\n        return fs.createReadStream(filepath);\n    });\n};\nutils.normalizeInputSource = function(source) {\n    if (source === null) {\n        return Buffer.alloc(0);\n    } else if (typeof source === \"string\") {\n        return Buffer.from(source);\n    } else if (utils.isStream(source)) {\n        // Always pipe through a PassThrough stream to guarantee pausing the stream if it's already flowing,\n        // since it will only be processed in a (distant) future iteration of the event loop, and will lose\n        // data if already flowing now.\n        return source.pipe(new PassThrough());\n    }\n    return source;\n};\nutils.sanitizePath = function(filepath) {\n    return normalizePath(filepath, false).replace(/^\\w+:/, \"\").replace(/^(\\.\\.\\/|\\/)+/, \"\");\n};\nutils.trailingSlashIt = function(str) {\n    return str.slice(-1) !== \"/\" ? str + \"/\" : str;\n};\nutils.unixifyPath = function(filepath) {\n    return normalizePath(filepath, false).replace(/^\\w+:/, \"\");\n};\nutils.walkdir = function(dirpath, base, callback) {\n    var results = [];\n    if (typeof base === \"function\") {\n        callback = base;\n        base = dirpath;\n    }\n    fs.readdir(dirpath, function(err, list) {\n        var i = 0;\n        var file;\n        var filepath;\n        if (err) {\n            return callback(err);\n        }\n        (function next() {\n            file = list[i++];\n            if (!file) {\n                return callback(null, results);\n            }\n            filepath = path.join(dirpath, file);\n            fs.stat(filepath, function(err, stats) {\n                results.push({\n                    path: filepath,\n                    relative: path.relative(base, filepath).replace(/\\\\/g, \"/\"),\n                    stats: stats\n                });\n                if (stats && stats.isDirectory()) {\n                    utils.walkdir(filepath, base, function(err, res) {\n                        if (err) {\n                            return callback(err);\n                        }\n                        res.forEach(function(dirEntry) {\n                            results.push(dirEntry);\n                        });\n                        next();\n                    });\n                } else {\n                    next();\n                }\n            });\n        })();\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/archiver-utils/index.js\n");

/***/ })

};
;