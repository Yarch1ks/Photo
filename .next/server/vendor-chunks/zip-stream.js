/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/zip-stream";
exports.ids = ["vendor-chunks/zip-stream"];
exports.modules = {

/***/ "(rsc)/./node_modules/zip-stream/index.js":
/*!******************************************!*\
  !*** ./node_modules/zip-stream/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * ZipStream\n *\n * @ignore\n * @license [MIT]{@link https://github.com/archiverjs/node-zip-stream/blob/master/LICENSE}\n * @copyright (c) 2014 Chris Talkington, contributors.\n */ var inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nvar ZipArchiveOutputStream = (__webpack_require__(/*! compress-commons */ \"(rsc)/./node_modules/compress-commons/lib/compress-commons.js\").ZipArchiveOutputStream);\nvar ZipArchiveEntry = (__webpack_require__(/*! compress-commons */ \"(rsc)/./node_modules/compress-commons/lib/compress-commons.js\").ZipArchiveEntry);\nvar util = __webpack_require__(/*! archiver-utils */ \"(rsc)/./node_modules/archiver-utils/index.js\");\n/**\n * @constructor\n * @extends external:ZipArchiveOutputStream\n * @param {Object} [options]\n * @param {String} [options.comment] Sets the zip archive comment.\n * @param {Boolean} [options.forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\n * @param {Boolean} [options.forceZip64=false] Forces the archive to contain ZIP64 headers.\n * @param {Boolean} [options.store=false] Sets the compression method to STORE.\n * @param {Object} [options.zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n * to control compression.\n */ var ZipStream = module.exports = function(options) {\n    if (!(this instanceof ZipStream)) {\n        return new ZipStream(options);\n    }\n    options = this.options = options || {};\n    options.zlib = options.zlib || {};\n    ZipArchiveOutputStream.call(this, options);\n    if (typeof options.level === \"number\" && options.level >= 0) {\n        options.zlib.level = options.level;\n        delete options.level;\n    }\n    if (!options.forceZip64 && typeof options.zlib.level === \"number\" && options.zlib.level === 0) {\n        options.store = true;\n    }\n    options.namePrependSlash = options.namePrependSlash || false;\n    if (options.comment && options.comment.length > 0) {\n        this.setComment(options.comment);\n    }\n};\ninherits(ZipStream, ZipArchiveOutputStream);\n/**\n * Normalizes entry data with fallbacks for key properties.\n *\n * @private\n * @param  {Object} data\n * @return {Object}\n */ ZipStream.prototype._normalizeFileData = function(data) {\n    data = util.defaults(data, {\n        type: \"file\",\n        name: null,\n        namePrependSlash: this.options.namePrependSlash,\n        linkname: null,\n        date: null,\n        mode: null,\n        store: this.options.store,\n        comment: \"\"\n    });\n    var isDir = data.type === \"directory\";\n    var isSymlink = data.type === \"symlink\";\n    if (data.name) {\n        data.name = util.sanitizePath(data.name);\n        if (!isSymlink && data.name.slice(-1) === \"/\") {\n            isDir = true;\n            data.type = \"directory\";\n        } else if (isDir) {\n            data.name += \"/\";\n        }\n    }\n    if (isDir || isSymlink) {\n        data.store = true;\n    }\n    data.date = util.dateify(data.date);\n    return data;\n};\n/**\n * Appends an entry given an input source (text string, buffer, or stream).\n *\n * @param  {(Buffer|Stream|String)} source The input source.\n * @param  {Object} data\n * @param  {String} data.name Sets the entry name including internal path.\n * @param  {String} [data.comment] Sets the entry comment.\n * @param  {(String|Date)} [data.date=NOW()] Sets the entry date.\n * @param  {Number} [data.mode=D:0755/F:0644] Sets the entry permissions.\n * @param  {Boolean} [data.store=options.store] Sets the compression method to STORE.\n * @param  {String} [data.type=file] Sets the entry type. Defaults to `directory`\n * if name ends with trailing slash.\n * @param  {Function} callback\n * @return this\n */ ZipStream.prototype.entry = function(source, data, callback) {\n    if (typeof callback !== \"function\") {\n        callback = this._emitErrorCallback.bind(this);\n    }\n    data = this._normalizeFileData(data);\n    if (data.type !== \"file\" && data.type !== \"directory\" && data.type !== \"symlink\") {\n        callback(new Error(data.type + \" entries not currently supported\"));\n        return;\n    }\n    if (typeof data.name !== \"string\" || data.name.length === 0) {\n        callback(new Error(\"entry name must be a non-empty string value\"));\n        return;\n    }\n    if (data.type === \"symlink\" && typeof data.linkname !== \"string\") {\n        callback(new Error(\"entry linkname must be a non-empty string value when type equals symlink\"));\n        return;\n    }\n    var entry = new ZipArchiveEntry(data.name);\n    entry.setTime(data.date, this.options.forceLocalTime);\n    if (data.namePrependSlash) {\n        entry.setName(data.name, true);\n    }\n    if (data.store) {\n        entry.setMethod(0);\n    }\n    if (data.comment.length > 0) {\n        entry.setComment(data.comment);\n    }\n    if (data.type === \"symlink\" && typeof data.mode !== \"number\") {\n        data.mode = 40960; // 0120000\n    }\n    if (typeof data.mode === \"number\") {\n        if (data.type === \"symlink\") {\n            data.mode |= 40960;\n        }\n        entry.setUnixMode(data.mode);\n    }\n    if (data.type === \"symlink\" && typeof data.linkname === \"string\") {\n        source = Buffer.from(data.linkname);\n    }\n    return ZipArchiveOutputStream.prototype.entry.call(this, entry, source, callback);\n};\n/**\n * Finalizes the instance and prevents further appending to the archive\n * structure (queue will continue til drained).\n *\n * @return void\n */ ZipStream.prototype.finalize = function() {\n    this.finish();\n}; /**\n * Returns the current number of bytes written to this stream.\n * @function ZipStream#getBytesWritten\n * @returns {Number}\n */  /**\n * Compress Commons ZipArchiveOutputStream\n * @external ZipArchiveOutputStream\n * @see {@link https://github.com/archiverjs/node-compress-commons}\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/zip-stream/index.js\n");

/***/ })

};
;