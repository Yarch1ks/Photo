/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tar-stream";
exports.ids = ["vendor-chunks/tar-stream"];
exports.modules = {

/***/ "(rsc)/./node_modules/tar-stream/constants.js":
/*!**********************************************!*\
  !*** ./node_modules/tar-stream/constants.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const constants = {\n    S_IFMT: 61440,\n    S_IFDIR: 16384,\n    S_IFCHR: 8192,\n    S_IFBLK: 24576,\n    S_IFIFO: 4096,\n    S_IFLNK: 40960\n};\ntry {\n    module.exports = (__webpack_require__(/*! fs */ \"fs\").constants) || constants;\n} catch  {\n    module.exports = constants;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGFyLXN0cmVhbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsWUFBWTtJQUNoQkMsUUFBUTtJQUNSQyxTQUFTO0lBQ1RDLFNBQVM7SUFDVEMsU0FBUztJQUNUQyxTQUFTO0lBQ1RDLFNBQVM7QUFDWDtBQUVBLElBQUk7SUFDRkMsT0FBT0MsT0FBTyxHQUFHQywrQ0FBdUIsSUFBSVQ7QUFDOUMsRUFBRSxPQUFNO0lBQ05PLE9BQU9DLE9BQU8sR0FBR1I7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9waG90by1za3UtcHJvY2Vzc29yLy4vbm9kZV9tb2R1bGVzL3Rhci1zdHJlYW0vY29uc3RhbnRzLmpzPzI0MDkiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29uc3RhbnRzID0geyAvLyBqdXN0IGZvciBlbnZzIHdpdGhvdXQgZnNcbiAgU19JRk1UOiA2MTQ0MCxcbiAgU19JRkRJUjogMTYzODQsXG4gIFNfSUZDSFI6IDgxOTIsXG4gIFNfSUZCTEs6IDI0NTc2LFxuICBTX0lGSUZPOiA0MDk2LFxuICBTX0lGTE5LOiA0MDk2MFxufVxuXG50cnkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2ZzJykuY29uc3RhbnRzIHx8IGNvbnN0YW50c1xufSBjYXRjaCB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29uc3RhbnRzXG59XG4iXSwibmFtZXMiOlsiY29uc3RhbnRzIiwiU19JRk1UIiwiU19JRkRJUiIsIlNfSUZDSFIiLCJTX0lGQkxLIiwiU19JRklGTyIsIlNfSUZMTksiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tar-stream/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tar-stream/extract.js":
/*!********************************************!*\
  !*** ./node_modules/tar-stream/extract.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { Writable, Readable, getStreamError } = __webpack_require__(/*! streamx */ \"(rsc)/./node_modules/streamx/index.js\");\nconst FIFO = __webpack_require__(/*! fast-fifo */ \"(rsc)/./node_modules/fast-fifo/index.js\");\nconst b4a = __webpack_require__(/*! b4a */ \"(rsc)/./node_modules/b4a/index.js\");\nconst headers = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/tar-stream/headers.js\");\nconst EMPTY = b4a.alloc(0);\nclass BufferList {\n    constructor(){\n        this.buffered = 0;\n        this.shifted = 0;\n        this.queue = new FIFO();\n        this._offset = 0;\n    }\n    push(buffer) {\n        this.buffered += buffer.byteLength;\n        this.queue.push(buffer);\n    }\n    shiftFirst(size) {\n        return this._buffered === 0 ? null : this._next(size);\n    }\n    shift(size) {\n        if (size > this.buffered) return null;\n        if (size === 0) return EMPTY;\n        let chunk = this._next(size);\n        if (size === chunk.byteLength) return chunk // likely case\n        ;\n        const chunks = [\n            chunk\n        ];\n        while((size -= chunk.byteLength) > 0){\n            chunk = this._next(size);\n            chunks.push(chunk);\n        }\n        return b4a.concat(chunks);\n    }\n    _next(size) {\n        const buf = this.queue.peek();\n        const rem = buf.byteLength - this._offset;\n        if (size >= rem) {\n            const sub = this._offset ? buf.subarray(this._offset, buf.byteLength) : buf;\n            this.queue.shift();\n            this._offset = 0;\n            this.buffered -= rem;\n            this.shifted += rem;\n            return sub;\n        }\n        this.buffered -= size;\n        this.shifted += size;\n        return buf.subarray(this._offset, this._offset += size);\n    }\n}\nclass Source extends Readable {\n    constructor(self, header, offset){\n        super();\n        this.header = header;\n        this.offset = offset;\n        this._parent = self;\n    }\n    _read(cb) {\n        if (this.header.size === 0) {\n            this.push(null);\n        }\n        if (this._parent._stream === this) {\n            this._parent._update();\n        }\n        cb(null);\n    }\n    _predestroy() {\n        this._parent.destroy(getStreamError(this));\n    }\n    _detach() {\n        if (this._parent._stream === this) {\n            this._parent._stream = null;\n            this._parent._missing = overflow(this.header.size);\n            this._parent._update();\n        }\n    }\n    _destroy(cb) {\n        this._detach();\n        cb(null);\n    }\n}\nclass Extract extends Writable {\n    constructor(opts){\n        super(opts);\n        if (!opts) opts = {};\n        this._buffer = new BufferList();\n        this._offset = 0;\n        this._header = null;\n        this._stream = null;\n        this._missing = 0;\n        this._longHeader = false;\n        this._callback = noop;\n        this._locked = false;\n        this._finished = false;\n        this._pax = null;\n        this._paxGlobal = null;\n        this._gnuLongPath = null;\n        this._gnuLongLinkPath = null;\n        this._filenameEncoding = opts.filenameEncoding || \"utf-8\";\n        this._allowUnknownFormat = !!opts.allowUnknownFormat;\n        this._unlockBound = this._unlock.bind(this);\n    }\n    _unlock(err) {\n        this._locked = false;\n        if (err) {\n            this.destroy(err);\n            this._continueWrite(err);\n            return;\n        }\n        this._update();\n    }\n    _consumeHeader() {\n        if (this._locked) return false;\n        this._offset = this._buffer.shifted;\n        try {\n            this._header = headers.decode(this._buffer.shift(512), this._filenameEncoding, this._allowUnknownFormat);\n        } catch (err) {\n            this._continueWrite(err);\n            return false;\n        }\n        if (!this._header) return true;\n        switch(this._header.type){\n            case \"gnu-long-path\":\n            case \"gnu-long-link-path\":\n            case \"pax-global-header\":\n            case \"pax-header\":\n                this._longHeader = true;\n                this._missing = this._header.size;\n                return true;\n        }\n        this._locked = true;\n        this._applyLongHeaders();\n        if (this._header.size === 0 || this._header.type === \"directory\") {\n            this.emit(\"entry\", this._header, this._createStream(), this._unlockBound);\n            return true;\n        }\n        this._stream = this._createStream();\n        this._missing = this._header.size;\n        this.emit(\"entry\", this._header, this._stream, this._unlockBound);\n        return true;\n    }\n    _applyLongHeaders() {\n        if (this._gnuLongPath) {\n            this._header.name = this._gnuLongPath;\n            this._gnuLongPath = null;\n        }\n        if (this._gnuLongLinkPath) {\n            this._header.linkname = this._gnuLongLinkPath;\n            this._gnuLongLinkPath = null;\n        }\n        if (this._pax) {\n            if (this._pax.path) this._header.name = this._pax.path;\n            if (this._pax.linkpath) this._header.linkname = this._pax.linkpath;\n            if (this._pax.size) this._header.size = parseInt(this._pax.size, 10);\n            this._header.pax = this._pax;\n            this._pax = null;\n        }\n    }\n    _decodeLongHeader(buf) {\n        switch(this._header.type){\n            case \"gnu-long-path\":\n                this._gnuLongPath = headers.decodeLongPath(buf, this._filenameEncoding);\n                break;\n            case \"gnu-long-link-path\":\n                this._gnuLongLinkPath = headers.decodeLongPath(buf, this._filenameEncoding);\n                break;\n            case \"pax-global-header\":\n                this._paxGlobal = headers.decodePax(buf);\n                break;\n            case \"pax-header\":\n                this._pax = this._paxGlobal === null ? headers.decodePax(buf) : Object.assign({}, this._paxGlobal, headers.decodePax(buf));\n                break;\n        }\n    }\n    _consumeLongHeader() {\n        this._longHeader = false;\n        this._missing = overflow(this._header.size);\n        const buf = this._buffer.shift(this._header.size);\n        try {\n            this._decodeLongHeader(buf);\n        } catch (err) {\n            this._continueWrite(err);\n            return false;\n        }\n        return true;\n    }\n    _consumeStream() {\n        const buf = this._buffer.shiftFirst(this._missing);\n        if (buf === null) return false;\n        this._missing -= buf.byteLength;\n        const drained = this._stream.push(buf);\n        if (this._missing === 0) {\n            this._stream.push(null);\n            if (drained) this._stream._detach();\n            return drained && this._locked === false;\n        }\n        return drained;\n    }\n    _createStream() {\n        return new Source(this, this._header, this._offset);\n    }\n    _update() {\n        while(this._buffer.buffered > 0 && !this.destroying){\n            if (this._missing > 0) {\n                if (this._stream !== null) {\n                    if (this._consumeStream() === false) return;\n                    continue;\n                }\n                if (this._longHeader === true) {\n                    if (this._missing > this._buffer.buffered) break;\n                    if (this._consumeLongHeader() === false) return false;\n                    continue;\n                }\n                const ignore = this._buffer.shiftFirst(this._missing);\n                if (ignore !== null) this._missing -= ignore.byteLength;\n                continue;\n            }\n            if (this._buffer.buffered < 512) break;\n            if (this._stream !== null || this._consumeHeader() === false) return;\n        }\n        this._continueWrite(null);\n    }\n    _continueWrite(err) {\n        const cb = this._callback;\n        this._callback = noop;\n        cb(err);\n    }\n    _write(data, cb) {\n        this._callback = cb;\n        this._buffer.push(data);\n        this._update();\n    }\n    _final(cb) {\n        this._finished = this._missing === 0 && this._buffer.buffered === 0;\n        cb(this._finished ? null : new Error(\"Unexpected end of data\"));\n    }\n    _predestroy() {\n        this._continueWrite(null);\n    }\n    _destroy(cb) {\n        if (this._stream) this._stream.destroy(getStreamError(this));\n        cb(null);\n    }\n    [Symbol.asyncIterator]() {\n        let error = null;\n        let promiseResolve = null;\n        let promiseReject = null;\n        let entryStream = null;\n        let entryCallback = null;\n        const extract = this;\n        this.on(\"entry\", onentry);\n        this.on(\"error\", (err)=>{\n            error = err;\n        });\n        this.on(\"close\", onclose);\n        return {\n            [Symbol.asyncIterator] () {\n                return this;\n            },\n            next () {\n                return new Promise(onnext);\n            },\n            return () {\n                return destroy(null);\n            },\n            throw (err) {\n                return destroy(err);\n            }\n        };\n        function consumeCallback(err) {\n            if (!entryCallback) return;\n            const cb = entryCallback;\n            entryCallback = null;\n            cb(err);\n        }\n        function onnext(resolve, reject) {\n            if (error) {\n                return reject(error);\n            }\n            if (entryStream) {\n                resolve({\n                    value: entryStream,\n                    done: false\n                });\n                entryStream = null;\n                return;\n            }\n            promiseResolve = resolve;\n            promiseReject = reject;\n            consumeCallback(null);\n            if (extract._finished && promiseResolve) {\n                promiseResolve({\n                    value: undefined,\n                    done: true\n                });\n                promiseResolve = promiseReject = null;\n            }\n        }\n        function onentry(header, stream, callback) {\n            entryCallback = callback;\n            stream.on(\"error\", noop) // no way around this due to tick sillyness\n            ;\n            if (promiseResolve) {\n                promiseResolve({\n                    value: stream,\n                    done: false\n                });\n                promiseResolve = promiseReject = null;\n            } else {\n                entryStream = stream;\n            }\n        }\n        function onclose() {\n            consumeCallback(error);\n            if (!promiseResolve) return;\n            if (error) promiseReject(error);\n            else promiseResolve({\n                value: undefined,\n                done: true\n            });\n            promiseResolve = promiseReject = null;\n        }\n        function destroy(err) {\n            extract.destroy(err);\n            consumeCallback(err);\n            return new Promise((resolve, reject)=>{\n                if (extract.destroyed) return resolve({\n                    value: undefined,\n                    done: true\n                });\n                extract.once(\"close\", function() {\n                    if (err) reject(err);\n                    else resolve({\n                        value: undefined,\n                        done: true\n                    });\n                });\n            });\n        }\n    }\n}\nmodule.exports = function extract(opts) {\n    return new Extract(opts);\n};\nfunction noop() {}\nfunction overflow(size) {\n    size &= 511;\n    return size && 512 - size;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGFyLXN0cmVhbS9leHRyYWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRUEsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLGNBQWMsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUN2RCxNQUFNQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNyQixNQUFNRSxNQUFNRixtQkFBT0EsQ0FBQztBQUNwQixNQUFNRyxVQUFVSCxtQkFBT0EsQ0FBQztBQUV4QixNQUFNSSxRQUFRRixJQUFJRyxLQUFLLENBQUM7QUFFeEIsTUFBTUM7SUFDSkMsYUFBZTtRQUNiLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSVQ7UUFFakIsSUFBSSxDQUFDVSxPQUFPLEdBQUc7SUFDakI7SUFFQUMsS0FBTUMsTUFBTSxFQUFFO1FBQ1osSUFBSSxDQUFDTCxRQUFRLElBQUlLLE9BQU9DLFVBQVU7UUFDbEMsSUFBSSxDQUFDSixLQUFLLENBQUNFLElBQUksQ0FBQ0M7SUFDbEI7SUFFQUUsV0FBWUMsSUFBSSxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDQyxTQUFTLEtBQUssSUFBSSxPQUFPLElBQUksQ0FBQ0MsS0FBSyxDQUFDRjtJQUNsRDtJQUVBRyxNQUFPSCxJQUFJLEVBQUU7UUFDWCxJQUFJQSxPQUFPLElBQUksQ0FBQ1IsUUFBUSxFQUFFLE9BQU87UUFDakMsSUFBSVEsU0FBUyxHQUFHLE9BQU9aO1FBRXZCLElBQUlnQixRQUFRLElBQUksQ0FBQ0YsS0FBSyxDQUFDRjtRQUV2QixJQUFJQSxTQUFTSSxNQUFNTixVQUFVLEVBQUUsT0FBT00sTUFBTSxjQUFjOztRQUUxRCxNQUFNQyxTQUFTO1lBQUNEO1NBQU07UUFFdEIsTUFBTyxDQUFDSixRQUFRSSxNQUFNTixVQUFVLElBQUksRUFBRztZQUNyQ00sUUFBUSxJQUFJLENBQUNGLEtBQUssQ0FBQ0Y7WUFDbkJL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UTtZQUN4Q2pCLGdCQUFnQmlCO1lBQ2hCRCxPQUFPZCxFQUFFLENBQUMsU0FBU2xELE1BQU0sMkNBQTJDOztZQUVwRSxJQUFJNkMsZ0JBQWdCO2dCQUNsQkEsZUFBZTtvQkFBRWdCLE9BQU9HO29CQUFRRixNQUFNO2dCQUFNO2dCQUM1Q2pCLGlCQUFpQkMsZ0JBQWdCO1lBQ25DLE9BQU87Z0JBQ0xDLGNBQWNpQjtZQUNoQjtRQUNGO1FBRUEsU0FBU1o7WUFDUE0sZ0JBQWdCZDtZQUNoQixJQUFJLENBQUNDLGdCQUFnQjtZQUNyQixJQUFJRCxPQUFPRSxjQUFjRjtpQkFDcEJDLGVBQWU7Z0JBQUVnQixPQUFPRTtnQkFBV0QsTUFBTTtZQUFLO1lBQ25EakIsaUJBQWlCQyxnQkFBZ0I7UUFDbkM7UUFFQSxTQUFTekQsUUFBU3lCLEdBQUc7WUFDbkJtQyxRQUFRNUQsT0FBTyxDQUFDeUI7WUFDaEI0QyxnQkFBZ0I1QztZQUNoQixPQUFPLElBQUl3QyxRQUFRLENBQUNLLFNBQVNDO2dCQUMzQixJQUFJWCxRQUFRaUIsU0FBUyxFQUFFLE9BQU9QLFFBQVE7b0JBQUVFLE9BQU9FO29CQUFXRCxNQUFNO2dCQUFLO2dCQUNyRWIsUUFBUWtCLElBQUksQ0FBQyxTQUFTO29CQUNwQixJQUFJckQsS0FBSzhDLE9BQU85Qzt5QkFDWDZDLFFBQVE7d0JBQUVFLE9BQU9FO3dCQUFXRCxNQUFNO29CQUFLO2dCQUM5QztZQUNGO1FBQ0Y7SUFDRjtBQUNGO0FBRUFNLE9BQU9DLE9BQU8sR0FBRyxTQUFTcEIsUUFBU3RELElBQUk7SUFDckMsT0FBTyxJQUFJRCxRQUFRQztBQUNyQjtBQUVBLFNBQVNLLFFBQVM7QUFFbEIsU0FBU1IsU0FBVXpCLElBQUk7SUFDckJBLFFBQVE7SUFDUixPQUFPQSxRQUFRLE1BQU1BO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGhvdG8tc2t1LXByb2Nlc3Nvci8uL25vZGVfbW9kdWxlcy90YXItc3RyZWFtL2V4dHJhY3QuanM/MzY2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IFdyaXRhYmxlLCBSZWFkYWJsZSwgZ2V0U3RyZWFtRXJyb3IgfSA9IHJlcXVpcmUoJ3N0cmVhbXgnKVxuY29uc3QgRklGTyA9IHJlcXVpcmUoJ2Zhc3QtZmlmbycpXG5jb25zdCBiNGEgPSByZXF1aXJlKCdiNGEnKVxuY29uc3QgaGVhZGVycyA9IHJlcXVpcmUoJy4vaGVhZGVycycpXG5cbmNvbnN0IEVNUFRZID0gYjRhLmFsbG9jKDApXG5cbmNsYXNzIEJ1ZmZlckxpc3Qge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5idWZmZXJlZCA9IDBcbiAgICB0aGlzLnNoaWZ0ZWQgPSAwXG4gICAgdGhpcy5xdWV1ZSA9IG5ldyBGSUZPKClcblxuICAgIHRoaXMuX29mZnNldCA9IDBcbiAgfVxuXG4gIHB1c2ggKGJ1ZmZlcikge1xuICAgIHRoaXMuYnVmZmVyZWQgKz0gYnVmZmVyLmJ5dGVMZW5ndGhcbiAgICB0aGlzLnF1ZXVlLnB1c2goYnVmZmVyKVxuICB9XG5cbiAgc2hpZnRGaXJzdCAoc2l6ZSkge1xuICAgIHJldHVybiB0aGlzLl9idWZmZXJlZCA9PT0gMCA/IG51bGwgOiB0aGlzLl9uZXh0KHNpemUpXG4gIH1cblxuICBzaGlmdCAoc2l6ZSkge1xuICAgIGlmIChzaXplID4gdGhpcy5idWZmZXJlZCkgcmV0dXJuIG51bGxcbiAgICBpZiAoc2l6ZSA9PT0gMCkgcmV0dXJuIEVNUFRZXG5cbiAgICBsZXQgY2h1bmsgPSB0aGlzLl9uZXh0KHNpemUpXG5cbiAgICBpZiAoc2l6ZSA9PT0gY2h1bmsuYnl0ZUxlbmd0aCkgcmV0dXJuIGNodW5rIC8vIGxpa2VseSBjYXNlXG5cbiAgICBjb25zdCBjaHVua3MgPSBbY2h1bmtdXG5cbiAgICB3aGlsZSAoKHNpemUgLT0gY2h1bmsuYnl0ZUxlbmd0aCkgPiAwKSB7XG4gICAgICBjaHVuayA9IHRoaXMuX25leHQoc2l6ZSlcbiAgICAgIGNodW5rcy5wdXNoKGNodW5rKVxuICAgIH1cblxuICAgIHJldHVybiBiNGEuY29uY2F0KGNodW5rcylcbiAgfVxuXG4gIF9uZXh0IChzaXplKSB7XG4gICAgY29uc3QgYnVmID0gdGhpcy5xdWV1ZS5wZWVrKClcbiAgICBjb25zdCByZW0gPSBidWYuYnl0ZUxlbmd0aCAtIHRoaXMuX29mZnNldFxuXG4gICAgaWYgKHNpemUgPj0gcmVtKSB7XG4gICAgICBjb25zdCBzdWIgPSB0aGlzLl9vZmZzZXQgPyBidWYuc3ViYXJyYXkodGhpcy5fb2Zmc2V0LCBidWYuYnl0ZUxlbmd0aCkgOiBidWZcbiAgICAgIHRoaXMucXVldWUuc2hpZnQoKVxuICAgICAgdGhpcy5fb2Zmc2V0ID0gMFxuICAgICAgdGhpcy5idWZmZXJlZCAtPSByZW1cbiAgICAgIHRoaXMuc2hpZnRlZCArPSByZW1cbiAgICAgIHJldHVybiBzdWJcbiAgICB9XG5cbiAgICB0aGlzLmJ1ZmZlcmVkIC09IHNpemVcbiAgICB0aGlzLnNoaWZ0ZWQgKz0gc2l6ZVxuXG4gICAgcmV0dXJuIGJ1Zi5zdWJhcnJheSh0aGlzLl9vZmZzZXQsICh0aGlzLl9vZmZzZXQgKz0gc2l6ZSkpXG4gIH1cbn1cblxuY2xhc3MgU291cmNlIGV4dGVuZHMgUmVhZGFibGUge1xuICBjb25zdHJ1Y3RvciAoc2VsZiwgaGVhZGVyLCBvZmZzZXQpIHtcbiAgICBzdXBlcigpXG5cbiAgICB0aGlzLmhlYWRlciA9IGhlYWRlclxuICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0XG5cbiAgICB0aGlzLl9wYXJlbnQgPSBzZWxmXG4gIH1cblxuICBfcmVhZCAoY2IpIHtcbiAgICBpZiAodGhpcy5oZWFkZXIuc2l6ZSA9PT0gMCkge1xuICAgICAgdGhpcy5wdXNoKG51bGwpXG4gICAgfVxuICAgIGlmICh0aGlzLl9wYXJlbnQuX3N0cmVhbSA9PT0gdGhpcykge1xuICAgICAgdGhpcy5fcGFyZW50Ll91cGRhdGUoKVxuICAgIH1cbiAgICBjYihudWxsKVxuICB9XG5cbiAgX3ByZWRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX3BhcmVudC5kZXN0cm95KGdldFN0cmVhbUVycm9yKHRoaXMpKVxuICB9XG5cbiAgX2RldGFjaCAoKSB7XG4gICAgaWYgKHRoaXMuX3BhcmVudC5fc3RyZWFtID09PSB0aGlzKSB7XG4gICAgICB0aGlzLl9wYXJlbnQuX3N0cmVhbSA9IG51bGxcbiAgICAgIHRoaXMuX3BhcmVudC5fbWlzc2luZyA9IG92ZXJmbG93KHRoaXMuaGVhZGVyLnNpemUpXG4gICAgICB0aGlzLl9wYXJlbnQuX3VwZGF0ZSgpXG4gICAgfVxuICB9XG5cbiAgX2Rlc3Ryb3kgKGNiKSB7XG4gICAgdGhpcy5fZGV0YWNoKClcbiAgICBjYihudWxsKVxuICB9XG59XG5cbmNsYXNzIEV4dHJhY3QgZXh0ZW5kcyBXcml0YWJsZSB7XG4gIGNvbnN0cnVjdG9yIChvcHRzKSB7XG4gICAgc3VwZXIob3B0cylcblxuICAgIGlmICghb3B0cykgb3B0cyA9IHt9XG5cbiAgICB0aGlzLl9idWZmZXIgPSBuZXcgQnVmZmVyTGlzdCgpXG4gICAgdGhpcy5fb2Zmc2V0ID0gMFxuICAgIHRoaXMuX2hlYWRlciA9IG51bGxcbiAgICB0aGlzLl9zdHJlYW0gPSBudWxsXG4gICAgdGhpcy5fbWlzc2luZyA9IDBcbiAgICB0aGlzLl9sb25nSGVhZGVyID0gZmFsc2VcbiAgICB0aGlzLl9jYWxsYmFjayA9IG5vb3BcbiAgICB0aGlzLl9sb2NrZWQgPSBmYWxzZVxuICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2VcbiAgICB0aGlzLl9wYXggPSBudWxsXG4gICAgdGhpcy5fcGF4R2xvYmFsID0gbnVsbFxuICAgIHRoaXMuX2dudUxvbmdQYXRoID0gbnVsbFxuICAgIHRoaXMuX2dudUxvbmdMaW5rUGF0aCA9IG51bGxcbiAgICB0aGlzLl9maWxlbmFtZUVuY29kaW5nID0gb3B0cy5maWxlbmFtZUVuY29kaW5nIHx8ICd1dGYtOCdcbiAgICB0aGlzLl9hbGxvd1Vua25vd25Gb3JtYXQgPSAhIW9wdHMuYWxsb3dVbmtub3duRm9ybWF0XG4gICAgdGhpcy5fdW5sb2NrQm91bmQgPSB0aGlzLl91bmxvY2suYmluZCh0aGlzKVxuICB9XG5cbiAgX3VubG9jayAoZXJyKSB7XG4gICAgdGhpcy5fbG9ja2VkID0gZmFsc2VcblxuICAgIGlmIChlcnIpIHtcbiAgICAgIHRoaXMuZGVzdHJveShlcnIpXG4gICAgICB0aGlzLl9jb250aW51ZVdyaXRlKGVycilcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX3VwZGF0ZSgpXG4gIH1cblxuICBfY29uc3VtZUhlYWRlciAoKSB7XG4gICAgaWYgKHRoaXMuX2xvY2tlZCkgcmV0dXJuIGZhbHNlXG5cbiAgICB0aGlzLl9vZmZzZXQgPSB0aGlzLl9idWZmZXIuc2hpZnRlZFxuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuX2hlYWRlciA9IGhlYWRlcnMuZGVjb2RlKHRoaXMuX2J1ZmZlci5zaGlmdCg1MTIpLCB0aGlzLl9maWxlbmFtZUVuY29kaW5nLCB0aGlzLl9hbGxvd1Vua25vd25Gb3JtYXQpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLl9jb250aW51ZVdyaXRlKGVycilcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGlmICghdGhpcy5faGVhZGVyKSByZXR1cm4gdHJ1ZVxuXG4gICAgc3dpdGNoICh0aGlzLl9oZWFkZXIudHlwZSkge1xuICAgICAgY2FzZSAnZ251LWxvbmctcGF0aCc6XG4gICAgICBjYXNlICdnbnUtbG9uZy1saW5rLXBhdGgnOlxuICAgICAgY2FzZSAncGF4LWdsb2JhbC1oZWFkZXInOlxuICAgICAgY2FzZSAncGF4LWhlYWRlcic6XG4gICAgICAgIHRoaXMuX2xvbmdIZWFkZXIgPSB0cnVlXG4gICAgICAgIHRoaXMuX21pc3NpbmcgPSB0aGlzLl9oZWFkZXIuc2l6ZVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHRoaXMuX2xvY2tlZCA9IHRydWVcbiAgICB0aGlzLl9hcHBseUxvbmdIZWFkZXJzKClcblxuICAgIGlmICh0aGlzLl9oZWFkZXIuc2l6ZSA9PT0gMCB8fCB0aGlzLl9oZWFkZXIudHlwZSA9PT0gJ2RpcmVjdG9yeScpIHtcbiAgICAgIHRoaXMuZW1pdCgnZW50cnknLCB0aGlzLl9oZWFkZXIsIHRoaXMuX2NyZWF0ZVN0cmVhbSgpLCB0aGlzLl91bmxvY2tCb3VuZClcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgdGhpcy5fc3RyZWFtID0gdGhpcy5fY3JlYXRlU3RyZWFtKClcbiAgICB0aGlzLl9taXNzaW5nID0gdGhpcy5faGVhZGVyLnNpemVcblxuICAgIHRoaXMuZW1pdCgnZW50cnknLCB0aGlzLl9oZWFkZXIsIHRoaXMuX3N0cmVhbSwgdGhpcy5fdW5sb2NrQm91bmQpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIF9hcHBseUxvbmdIZWFkZXJzICgpIHtcbiAgICBpZiAodGhpcy5fZ251TG9uZ1BhdGgpIHtcbiAgICAgIHRoaXMuX2hlYWRlci5uYW1lID0gdGhpcy5fZ251TG9uZ1BhdGhcbiAgICAgIHRoaXMuX2dudUxvbmdQYXRoID0gbnVsbFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9nbnVMb25nTGlua1BhdGgpIHtcbiAgICAgIHRoaXMuX2hlYWRlci5saW5rbmFtZSA9IHRoaXMuX2dudUxvbmdMaW5rUGF0aFxuICAgICAgdGhpcy5fZ251TG9uZ0xpbmtQYXRoID0gbnVsbFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9wYXgpIHtcbiAgICAgIGlmICh0aGlzLl9wYXgucGF0aCkgdGhpcy5faGVhZGVyLm5hbWUgPSB0aGlzLl9wYXgucGF0aFxuICAgICAgaWYgKHRoaXMuX3BheC5saW5rcGF0aCkgdGhpcy5faGVhZGVyLmxpbmtuYW1lID0gdGhpcy5fcGF4LmxpbmtwYXRoXG4gICAgICBpZiAodGhpcy5fcGF4LnNpemUpIHRoaXMuX2hlYWRlci5zaXplID0gcGFyc2VJbnQodGhpcy5fcGF4LnNpemUsIDEwKVxuICAgICAgdGhpcy5faGVhZGVyLnBheCA9IHRoaXMuX3BheFxuICAgICAgdGhpcy5fcGF4ID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIF9kZWNvZGVMb25nSGVhZGVyIChidWYpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX2hlYWRlci50eXBlKSB7XG4gICAgICBjYXNlICdnbnUtbG9uZy1wYXRoJzpcbiAgICAgICAgdGhpcy5fZ251TG9uZ1BhdGggPSBoZWFkZXJzLmRlY29kZUxvbmdQYXRoKGJ1ZiwgdGhpcy5fZmlsZW5hbWVFbmNvZGluZylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2dudS1sb25nLWxpbmstcGF0aCc6XG4gICAgICAgIHRoaXMuX2dudUxvbmdMaW5rUGF0aCA9IGhlYWRlcnMuZGVjb2RlTG9uZ1BhdGgoYnVmLCB0aGlzLl9maWxlbmFtZUVuY29kaW5nKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncGF4LWdsb2JhbC1oZWFkZXInOlxuICAgICAgICB0aGlzLl9wYXhHbG9iYWwgPSBoZWFkZXJzLmRlY29kZVBheChidWYpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdwYXgtaGVhZGVyJzpcbiAgICAgICAgdGhpcy5fcGF4ID0gdGhpcy5fcGF4R2xvYmFsID09PSBudWxsXG4gICAgICAgICAgPyBoZWFkZXJzLmRlY29kZVBheChidWYpXG4gICAgICAgICAgOiBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9wYXhHbG9iYWwsIGhlYWRlcnMuZGVjb2RlUGF4KGJ1ZikpXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgX2NvbnN1bWVMb25nSGVhZGVyICgpIHtcbiAgICB0aGlzLl9sb25nSGVhZGVyID0gZmFsc2VcbiAgICB0aGlzLl9taXNzaW5nID0gb3ZlcmZsb3codGhpcy5faGVhZGVyLnNpemUpXG5cbiAgICBjb25zdCBidWYgPSB0aGlzLl9idWZmZXIuc2hpZnQodGhpcy5faGVhZGVyLnNpemUpXG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5fZGVjb2RlTG9uZ0hlYWRlcihidWYpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLl9jb250aW51ZVdyaXRlKGVycilcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBfY29uc3VtZVN0cmVhbSAoKSB7XG4gICAgY29uc3QgYnVmID0gdGhpcy5fYnVmZmVyLnNoaWZ0Rmlyc3QodGhpcy5fbWlzc2luZylcbiAgICBpZiAoYnVmID09PSBudWxsKSByZXR1cm4gZmFsc2VcblxuICAgIHRoaXMuX21pc3NpbmcgLT0gYnVmLmJ5dGVMZW5ndGhcbiAgICBjb25zdCBkcmFpbmVkID0gdGhpcy5fc3RyZWFtLnB1c2goYnVmKVxuXG4gICAgaWYgKHRoaXMuX21pc3NpbmcgPT09IDApIHtcbiAgICAgIHRoaXMuX3N0cmVhbS5wdXNoKG51bGwpXG4gICAgICBpZiAoZHJhaW5lZCkgdGhpcy5fc3RyZWFtLl9kZXRhY2goKVxuICAgICAgcmV0dXJuIGRyYWluZWQgJiYgdGhpcy5fbG9ja2VkID09PSBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiBkcmFpbmVkXG4gIH1cblxuICBfY3JlYXRlU3RyZWFtICgpIHtcbiAgICByZXR1cm4gbmV3IFNvdXJjZSh0aGlzLCB0aGlzLl9oZWFkZXIsIHRoaXMuX29mZnNldClcbiAgfVxuXG4gIF91cGRhdGUgKCkge1xuICAgIHdoaWxlICh0aGlzLl9idWZmZXIuYnVmZmVyZWQgPiAwICYmICF0aGlzLmRlc3Ryb3lpbmcpIHtcbiAgICAgIGlmICh0aGlzLl9taXNzaW5nID4gMCkge1xuICAgICAgICBpZiAodGhpcy5fc3RyZWFtICE9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2NvbnN1bWVTdHJlYW0oKSA9PT0gZmFsc2UpIHJldHVyblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fbG9uZ0hlYWRlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGlmICh0aGlzLl9taXNzaW5nID4gdGhpcy5fYnVmZmVyLmJ1ZmZlcmVkKSBicmVha1xuICAgICAgICAgIGlmICh0aGlzLl9jb25zdW1lTG9uZ0hlYWRlcigpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlnbm9yZSA9IHRoaXMuX2J1ZmZlci5zaGlmdEZpcnN0KHRoaXMuX21pc3NpbmcpXG4gICAgICAgIGlmIChpZ25vcmUgIT09IG51bGwpIHRoaXMuX21pc3NpbmcgLT0gaWdub3JlLmJ5dGVMZW5ndGhcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2J1ZmZlci5idWZmZXJlZCA8IDUxMikgYnJlYWtcbiAgICAgIGlmICh0aGlzLl9zdHJlYW0gIT09IG51bGwgfHwgdGhpcy5fY29uc3VtZUhlYWRlcigpID09PSBmYWxzZSkgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fY29udGludWVXcml0ZShudWxsKVxuICB9XG5cbiAgX2NvbnRpbnVlV3JpdGUgKGVycikge1xuICAgIGNvbnN0IGNiID0gdGhpcy5fY2FsbGJhY2tcbiAgICB0aGlzLl9jYWxsYmFjayA9IG5vb3BcbiAgICBjYihlcnIpXG4gIH1cblxuICBfd3JpdGUgKGRhdGEsIGNiKSB7XG4gICAgdGhpcy5fY2FsbGJhY2sgPSBjYlxuICAgIHRoaXMuX2J1ZmZlci5wdXNoKGRhdGEpXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgfVxuXG4gIF9maW5hbCAoY2IpIHtcbiAgICB0aGlzLl9maW5pc2hlZCA9IHRoaXMuX21pc3NpbmcgPT09IDAgJiYgdGhpcy5fYnVmZmVyLmJ1ZmZlcmVkID09PSAwXG4gICAgY2IodGhpcy5fZmluaXNoZWQgPyBudWxsIDogbmV3IEVycm9yKCdVbmV4cGVjdGVkIGVuZCBvZiBkYXRhJykpXG4gIH1cblxuICBfcHJlZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fY29udGludWVXcml0ZShudWxsKVxuICB9XG5cbiAgX2Rlc3Ryb3kgKGNiKSB7XG4gICAgaWYgKHRoaXMuX3N0cmVhbSkgdGhpcy5fc3RyZWFtLmRlc3Ryb3koZ2V0U3RyZWFtRXJyb3IodGhpcykpXG4gICAgY2IobnVsbClcbiAgfVxuXG4gIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gKCkge1xuICAgIGxldCBlcnJvciA9IG51bGxcblxuICAgIGxldCBwcm9taXNlUmVzb2x2ZSA9IG51bGxcbiAgICBsZXQgcHJvbWlzZVJlamVjdCA9IG51bGxcblxuICAgIGxldCBlbnRyeVN0cmVhbSA9IG51bGxcbiAgICBsZXQgZW50cnlDYWxsYmFjayA9IG51bGxcblxuICAgIGNvbnN0IGV4dHJhY3QgPSB0aGlzXG5cbiAgICB0aGlzLm9uKCdlbnRyeScsIG9uZW50cnkpXG4gICAgdGhpcy5vbignZXJyb3InLCAoZXJyKSA9PiB7IGVycm9yID0gZXJyIH0pXG4gICAgdGhpcy5vbignY2xvc2UnLCBvbmNsb3NlKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gKCkge1xuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfSxcbiAgICAgIG5leHQgKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2Uob25uZXh0KVxuICAgICAgfSxcbiAgICAgIHJldHVybiAoKSB7XG4gICAgICAgIHJldHVybiBkZXN0cm95KG51bGwpXG4gICAgICB9LFxuICAgICAgdGhyb3cgKGVycikge1xuICAgICAgICByZXR1cm4gZGVzdHJveShlcnIpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uc3VtZUNhbGxiYWNrIChlcnIpIHtcbiAgICAgIGlmICghZW50cnlDYWxsYmFjaykgcmV0dXJuXG4gICAgICBjb25zdCBjYiA9IGVudHJ5Q2FsbGJhY2tcbiAgICAgIGVudHJ5Q2FsbGJhY2sgPSBudWxsXG4gICAgICBjYihlcnIpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25uZXh0IChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKVxuICAgICAgfVxuXG4gICAgICBpZiAoZW50cnlTdHJlYW0pIHtcbiAgICAgICAgcmVzb2x2ZSh7IHZhbHVlOiBlbnRyeVN0cmVhbSwgZG9uZTogZmFsc2UgfSlcbiAgICAgICAgZW50cnlTdHJlYW0gPSBudWxsXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBwcm9taXNlUmVzb2x2ZSA9IHJlc29sdmVcbiAgICAgIHByb21pc2VSZWplY3QgPSByZWplY3RcblxuICAgICAgY29uc3VtZUNhbGxiYWNrKG51bGwpXG5cbiAgICAgIGlmIChleHRyYWN0Ll9maW5pc2hlZCAmJiBwcm9taXNlUmVzb2x2ZSkge1xuICAgICAgICBwcm9taXNlUmVzb2x2ZSh7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfSlcbiAgICAgICAgcHJvbWlzZVJlc29sdmUgPSBwcm9taXNlUmVqZWN0ID0gbnVsbFxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uZW50cnkgKGhlYWRlciwgc3RyZWFtLCBjYWxsYmFjaykge1xuICAgICAgZW50cnlDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgICBzdHJlYW0ub24oJ2Vycm9yJywgbm9vcCkgLy8gbm8gd2F5IGFyb3VuZCB0aGlzIGR1ZSB0byB0aWNrIHNpbGx5bmVzc1xuXG4gICAgICBpZiAocHJvbWlzZVJlc29sdmUpIHtcbiAgICAgICAgcHJvbWlzZVJlc29sdmUoeyB2YWx1ZTogc3RyZWFtLCBkb25lOiBmYWxzZSB9KVxuICAgICAgICBwcm9taXNlUmVzb2x2ZSA9IHByb21pc2VSZWplY3QgPSBudWxsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbnRyeVN0cmVhbSA9IHN0cmVhbVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uY2xvc2UgKCkge1xuICAgICAgY29uc3VtZUNhbGxiYWNrKGVycm9yKVxuICAgICAgaWYgKCFwcm9taXNlUmVzb2x2ZSkgcmV0dXJuXG4gICAgICBpZiAoZXJyb3IpIHByb21pc2VSZWplY3QoZXJyb3IpXG4gICAgICBlbHNlIHByb21pc2VSZXNvbHZlKHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9KVxuICAgICAgcHJvbWlzZVJlc29sdmUgPSBwcm9taXNlUmVqZWN0ID0gbnVsbFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlc3Ryb3kgKGVycikge1xuICAgICAgZXh0cmFjdC5kZXN0cm95KGVycilcbiAgICAgIGNvbnN1bWVDYWxsYmFjayhlcnIpXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpZiAoZXh0cmFjdC5kZXN0cm95ZWQpIHJldHVybiByZXNvbHZlKHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9KVxuICAgICAgICBleHRyYWN0Lm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpXG4gICAgICAgICAgZWxzZSByZXNvbHZlKHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9KVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHRyYWN0IChvcHRzKSB7XG4gIHJldHVybiBuZXcgRXh0cmFjdChvcHRzKVxufVxuXG5mdW5jdGlvbiBub29wICgpIHt9XG5cbmZ1bmN0aW9uIG92ZXJmbG93IChzaXplKSB7XG4gIHNpemUgJj0gNTExXG4gIHJldHVybiBzaXplICYmIDUxMiAtIHNpemVcbn1cbiJdLCJuYW1lcyI6WyJXcml0YWJsZSIsIlJlYWRhYmxlIiwiZ2V0U3RyZWFtRXJyb3IiLCJyZXF1aXJlIiwiRklGTyIsImI0YSIsImhlYWRlcnMiLCJFTVBUWSIsImFsbG9jIiwiQnVmZmVyTGlzdCIsImNvbnN0cnVjdG9yIiwiYnVmZmVyZWQiLCJzaGlmdGVkIiwicXVldWUiLCJfb2Zmc2V0IiwicHVzaCIsImJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJzaGlmdEZpcnN0Iiwic2l6ZSIsIl9idWZmZXJlZCIsIl9uZXh0Iiwic2hpZnQiLCJjaHVuayIsImNodW5rcyIsImNvbmNhdCIsImJ1ZiIsInBlZWsiLCJyZW0iLCJzdWIiLCJzdWJhcnJheSIsIlNvdXJjZSIsInNlbGYiLCJoZWFkZXIiLCJvZmZzZXQiLCJfcGFyZW50IiwiX3JlYWQiLCJjYiIsIl9zdHJlYW0iLCJfdXBkYXRlIiwiX3ByZWRlc3Ryb3kiLCJkZXN0cm95IiwiX2RldGFjaCIsIl9taXNzaW5nIiwib3ZlcmZsb3ciLCJfZGVzdHJveSIsIkV4dHJhY3QiLCJvcHRzIiwiX2J1ZmZlciIsIl9oZWFkZXIiLCJfbG9uZ0hlYWRlciIsIl9jYWxsYmFjayIsIm5vb3AiLCJfbG9ja2VkIiwiX2ZpbmlzaGVkIiwiX3BheCIsIl9wYXhHbG9iYWwiLCJfZ251TG9uZ1BhdGgiLCJfZ251TG9uZ0xpbmtQYXRoIiwiX2ZpbGVuYW1lRW5jb2RpbmciLCJmaWxlbmFtZUVuY29kaW5nIiwiX2FsbG93VW5rbm93bkZvcm1hdCIsImFsbG93VW5rbm93bkZvcm1hdCIsIl91bmxvY2tCb3VuZCIsIl91bmxvY2siLCJiaW5kIiwiZXJyIiwiX2NvbnRpbnVlV3JpdGUiLCJfY29uc3VtZUhlYWRlciIsImRlY29kZSIsInR5cGUiLCJfYXBwbHlMb25nSGVhZGVycyIsImVtaXQiLCJfY3JlYXRlU3RyZWFtIiwibmFtZSIsImxpbmtuYW1lIiwicGF0aCIsImxpbmtwYXRoIiwicGFyc2VJbnQiLCJwYXgiLCJfZGVjb2RlTG9uZ0hlYWRlciIsImRlY29kZUxvbmdQYXRoIiwiZGVjb2RlUGF4IiwiT2JqZWN0IiwiYXNzaWduIiwiX2NvbnN1bWVMb25nSGVhZGVyIiwiX2NvbnN1bWVTdHJlYW0iLCJkcmFpbmVkIiwiZGVzdHJveWluZyIsImlnbm9yZSIsIl93cml0ZSIsImRhdGEiLCJfZmluYWwiLCJFcnJvciIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJlcnJvciIsInByb21pc2VSZXNvbHZlIiwicHJvbWlzZVJlamVjdCIsImVudHJ5U3RyZWFtIiwiZW50cnlDYWxsYmFjayIsImV4dHJhY3QiLCJvbiIsIm9uZW50cnkiLCJvbmNsb3NlIiwibmV4dCIsIlByb21pc2UiLCJvbm5leHQiLCJyZXR1cm4iLCJ0aHJvdyIsImNvbnN1bWVDYWxsYmFjayIsInJlc29sdmUiLCJyZWplY3QiLCJ2YWx1ZSIsImRvbmUiLCJ1bmRlZmluZWQiLCJzdHJlYW0iLCJjYWxsYmFjayIsImRlc3Ryb3llZCIsIm9uY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tar-stream/extract.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tar-stream/headers.js":
/*!********************************************!*\
  !*** ./node_modules/tar-stream/headers.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const b4a = __webpack_require__(/*! b4a */ \"(rsc)/./node_modules/b4a/index.js\");\nconst ZEROS = \"0000000000000000000\";\nconst SEVENS = \"7777777777777777777\";\nconst ZERO_OFFSET = \"0\".charCodeAt(0);\nconst USTAR_MAGIC = b4a.from([\n    0x75,\n    0x73,\n    0x74,\n    0x61,\n    0x72,\n    0x00\n]) // ustar\\x00\n;\nconst USTAR_VER = b4a.from([\n    ZERO_OFFSET,\n    ZERO_OFFSET\n]);\nconst GNU_MAGIC = b4a.from([\n    0x75,\n    0x73,\n    0x74,\n    0x61,\n    0x72,\n    0x20\n]) // ustar\\x20\n;\nconst GNU_VER = b4a.from([\n    0x20,\n    0x00\n]);\nconst MASK = 4095;\nconst MAGIC_OFFSET = 257;\nconst VERSION_OFFSET = 263;\nexports.decodeLongPath = function decodeLongPath(buf, encoding) {\n    return decodeStr(buf, 0, buf.length, encoding);\n};\nexports.encodePax = function encodePax(opts) {\n    let result = \"\";\n    if (opts.name) result += addLength(\" path=\" + opts.name + \"\\n\");\n    if (opts.linkname) result += addLength(\" linkpath=\" + opts.linkname + \"\\n\");\n    const pax = opts.pax;\n    if (pax) {\n        for(const key in pax){\n            result += addLength(\" \" + key + \"=\" + pax[key] + \"\\n\");\n        }\n    }\n    return b4a.from(result);\n};\nexports.decodePax = function decodePax(buf) {\n    const result = {};\n    while(buf.length){\n        let i = 0;\n        while(i < buf.length && buf[i] !== 32)i++;\n        const len = parseInt(b4a.toString(buf.subarray(0, i)), 10);\n        if (!len) return result;\n        const b = b4a.toString(buf.subarray(i + 1, len - 1));\n        const keyIndex = b.indexOf(\"=\");\n        if (keyIndex === -1) return result;\n        result[b.slice(0, keyIndex)] = b.slice(keyIndex + 1);\n        buf = buf.subarray(len);\n    }\n    return result;\n};\nexports.encode = function encode(opts) {\n    const buf = b4a.alloc(512);\n    let name = opts.name;\n    let prefix = \"\";\n    if (opts.typeflag === 5 && name[name.length - 1] !== \"/\") name += \"/\";\n    if (b4a.byteLength(name) !== name.length) return null // utf-8\n    ;\n    while(b4a.byteLength(name) > 100){\n        const i = name.indexOf(\"/\");\n        if (i === -1) return null;\n        prefix += prefix ? \"/\" + name.slice(0, i) : name.slice(0, i);\n        name = name.slice(i + 1);\n    }\n    if (b4a.byteLength(name) > 100 || b4a.byteLength(prefix) > 155) return null;\n    if (opts.linkname && b4a.byteLength(opts.linkname) > 100) return null;\n    b4a.write(buf, name);\n    b4a.write(buf, encodeOct(opts.mode & MASK, 6), 100);\n    b4a.write(buf, encodeOct(opts.uid, 6), 108);\n    b4a.write(buf, encodeOct(opts.gid, 6), 116);\n    encodeSize(opts.size, buf, 124);\n    b4a.write(buf, encodeOct(opts.mtime.getTime() / 1000 | 0, 11), 136);\n    buf[156] = ZERO_OFFSET + toTypeflag(opts.type);\n    if (opts.linkname) b4a.write(buf, opts.linkname, 157);\n    b4a.copy(USTAR_MAGIC, buf, MAGIC_OFFSET);\n    b4a.copy(USTAR_VER, buf, VERSION_OFFSET);\n    if (opts.uname) b4a.write(buf, opts.uname, 265);\n    if (opts.gname) b4a.write(buf, opts.gname, 297);\n    b4a.write(buf, encodeOct(opts.devmajor || 0, 6), 329);\n    b4a.write(buf, encodeOct(opts.devminor || 0, 6), 337);\n    if (prefix) b4a.write(buf, prefix, 345);\n    b4a.write(buf, encodeOct(cksum(buf), 6), 148);\n    return buf;\n};\nexports.decode = function decode(buf, filenameEncoding, allowUnknownFormat) {\n    let typeflag = buf[156] === 0 ? 0 : buf[156] - ZERO_OFFSET;\n    let name = decodeStr(buf, 0, 100, filenameEncoding);\n    const mode = decodeOct(buf, 100, 8);\n    const uid = decodeOct(buf, 108, 8);\n    const gid = decodeOct(buf, 116, 8);\n    const size = decodeOct(buf, 124, 12);\n    const mtime = decodeOct(buf, 136, 12);\n    const type = toType(typeflag);\n    const linkname = buf[157] === 0 ? null : decodeStr(buf, 157, 100, filenameEncoding);\n    const uname = decodeStr(buf, 265, 32);\n    const gname = decodeStr(buf, 297, 32);\n    const devmajor = decodeOct(buf, 329, 8);\n    const devminor = decodeOct(buf, 337, 8);\n    const c = cksum(buf);\n    // checksum is still initial value if header was null.\n    if (c === 8 * 32) return null;\n    // valid checksum\n    if (c !== decodeOct(buf, 148, 8)) throw new Error(\"Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?\");\n    if (isUSTAR(buf)) {\n        // ustar (posix) format.\n        // prepend prefix, if present.\n        if (buf[345]) name = decodeStr(buf, 345, 155, filenameEncoding) + \"/\" + name;\n    } else if (isGNU(buf)) {\n    // 'gnu'/'oldgnu' format. Similar to ustar, but has support for incremental and\n    // multi-volume tarballs.\n    } else {\n        if (!allowUnknownFormat) {\n            throw new Error(\"Invalid tar header: unknown format.\");\n        }\n    }\n    // to support old tar versions that use trailing / to indicate dirs\n    if (typeflag === 0 && name && name[name.length - 1] === \"/\") typeflag = 5;\n    return {\n        name,\n        mode,\n        uid,\n        gid,\n        size,\n        mtime: new Date(1000 * mtime),\n        type,\n        linkname,\n        uname,\n        gname,\n        devmajor,\n        devminor,\n        pax: null\n    };\n};\nfunction isUSTAR(buf) {\n    return b4a.equals(USTAR_MAGIC, buf.subarray(MAGIC_OFFSET, MAGIC_OFFSET + 6));\n}\nfunction isGNU(buf) {\n    return b4a.equals(GNU_MAGIC, buf.subarray(MAGIC_OFFSET, MAGIC_OFFSET + 6)) && b4a.equals(GNU_VER, buf.subarray(VERSION_OFFSET, VERSION_OFFSET + 2));\n}\nfunction clamp(index, len, defaultValue) {\n    if (typeof index !== \"number\") return defaultValue;\n    index = ~~index // Coerce to integer.\n    ;\n    if (index >= len) return len;\n    if (index >= 0) return index;\n    index += len;\n    if (index >= 0) return index;\n    return 0;\n}\nfunction toType(flag) {\n    switch(flag){\n        case 0:\n            return \"file\";\n        case 1:\n            return \"link\";\n        case 2:\n            return \"symlink\";\n        case 3:\n            return \"character-device\";\n        case 4:\n            return \"block-device\";\n        case 5:\n            return \"directory\";\n        case 6:\n            return \"fifo\";\n        case 7:\n            return \"contiguous-file\";\n        case 72:\n            return \"pax-header\";\n        case 55:\n            return \"pax-global-header\";\n        case 27:\n            return \"gnu-long-link-path\";\n        case 28:\n        case 30:\n            return \"gnu-long-path\";\n    }\n    return null;\n}\nfunction toTypeflag(flag) {\n    switch(flag){\n        case \"file\":\n            return 0;\n        case \"link\":\n            return 1;\n        case \"symlink\":\n            return 2;\n        case \"character-device\":\n            return 3;\n        case \"block-device\":\n            return 4;\n        case \"directory\":\n            return 5;\n        case \"fifo\":\n            return 6;\n        case \"contiguous-file\":\n            return 7;\n        case \"pax-header\":\n            return 72;\n    }\n    return 0;\n}\nfunction indexOf(block, num, offset, end) {\n    for(; offset < end; offset++){\n        if (block[offset] === num) return offset;\n    }\n    return end;\n}\nfunction cksum(block) {\n    let sum = 8 * 32;\n    for(let i = 0; i < 148; i++)sum += block[i];\n    for(let j = 156; j < 512; j++)sum += block[j];\n    return sum;\n}\nfunction encodeOct(val, n) {\n    val = val.toString(8);\n    if (val.length > n) return SEVENS.slice(0, n) + \" \";\n    return ZEROS.slice(0, n - val.length) + val + \" \";\n}\nfunction encodeSizeBin(num, buf, off) {\n    buf[off] = 0x80;\n    for(let i = 11; i > 0; i--){\n        buf[off + i] = num & 0xff;\n        num = Math.floor(num / 0x100);\n    }\n}\nfunction encodeSize(num, buf, off) {\n    if (num.toString(8).length > 11) {\n        encodeSizeBin(num, buf, off);\n    } else {\n        b4a.write(buf, encodeOct(num, 11), off);\n    }\n}\n/* Copied from the node-tar repo and modified to meet\n * tar-stream coding standard.\n *\n * Source: https://github.com/npm/node-tar/blob/51b6627a1f357d2eb433e7378e5f05e83b7aa6cd/lib/header.js#L349\n */ function parse256(buf) {\n    // first byte MUST be either 80 or FF\n    // 80 for positive, FF for 2's comp\n    let positive;\n    if (buf[0] === 0x80) positive = true;\n    else if (buf[0] === 0xFF) positive = false;\n    else return null;\n    // build up a base-256 tuple from the least sig to the highest\n    const tuple = [];\n    let i;\n    for(i = buf.length - 1; i > 0; i--){\n        const byte = buf[i];\n        if (positive) tuple.push(byte);\n        else tuple.push(0xFF - byte);\n    }\n    let sum = 0;\n    const l = tuple.length;\n    for(i = 0; i < l; i++){\n        sum += tuple[i] * Math.pow(256, i);\n    }\n    return positive ? sum : -1 * sum;\n}\nfunction decodeOct(val, offset, length) {\n    val = val.subarray(offset, offset + length);\n    offset = 0;\n    // If prefixed with 0x80 then parse as a base-256 integer\n    if (val[offset] & 0x80) {\n        return parse256(val);\n    } else {\n        // Older versions of tar can prefix with spaces\n        while(offset < val.length && val[offset] === 32)offset++;\n        const end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length);\n        while(offset < end && val[offset] === 0)offset++;\n        if (end === offset) return 0;\n        return parseInt(b4a.toString(val.subarray(offset, end)), 8);\n    }\n}\nfunction decodeStr(val, offset, length, encoding) {\n    return b4a.toString(val.subarray(offset, indexOf(val, 0, offset, offset + length)), encoding);\n}\nfunction addLength(str) {\n    const len = b4a.byteLength(str);\n    let digits = Math.floor(Math.log(len) / Math.log(10)) + 1;\n    if (len + digits >= Math.pow(10, digits)) digits++;\n    return len + digits + str;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tar-stream/headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tar-stream/index.js":
/*!******************************************!*\
  !*** ./node_modules/tar-stream/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.extract = __webpack_require__(/*! ./extract */ \"(rsc)/./node_modules/tar-stream/extract.js\");\nexports.pack = __webpack_require__(/*! ./pack */ \"(rsc)/./node_modules/tar-stream/pack.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGFyLXN0cmVhbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsb0dBQTBCO0FBQzFCQSwyRkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9waG90by1za3UtcHJvY2Vzc29yLy4vbm9kZV9tb2R1bGVzL3Rhci1zdHJlYW0vaW5kZXguanM/ZjNmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLmV4dHJhY3QgPSByZXF1aXJlKCcuL2V4dHJhY3QnKVxuZXhwb3J0cy5wYWNrID0gcmVxdWlyZSgnLi9wYWNrJylcbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwiZXh0cmFjdCIsInJlcXVpcmUiLCJwYWNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tar-stream/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tar-stream/pack.js":
/*!*****************************************!*\
  !*** ./node_modules/tar-stream/pack.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { Readable, Writable, getStreamError } = __webpack_require__(/*! streamx */ \"(rsc)/./node_modules/streamx/index.js\");\nconst b4a = __webpack_require__(/*! b4a */ \"(rsc)/./node_modules/b4a/index.js\");\nconst constants = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/tar-stream/constants.js\");\nconst headers = __webpack_require__(/*! ./headers */ \"(rsc)/./node_modules/tar-stream/headers.js\");\nconst DMODE = 493;\nconst FMODE = 420;\nconst END_OF_TAR = b4a.alloc(1024);\nclass Sink extends Writable {\n    constructor(pack, header, callback){\n        super({\n            mapWritable,\n            eagerOpen: true\n        });\n        this.written = 0;\n        this.header = header;\n        this._callback = callback;\n        this._linkname = null;\n        this._isLinkname = header.type === \"symlink\" && !header.linkname;\n        this._isVoid = header.type !== \"file\" && header.type !== \"contiguous-file\";\n        this._finished = false;\n        this._pack = pack;\n        this._openCallback = null;\n        if (this._pack._stream === null) this._pack._stream = this;\n        else this._pack._pending.push(this);\n    }\n    _open(cb) {\n        this._openCallback = cb;\n        if (this._pack._stream === this) this._continueOpen();\n    }\n    _continuePack(err) {\n        if (this._callback === null) return;\n        const callback = this._callback;\n        this._callback = null;\n        callback(err);\n    }\n    _continueOpen() {\n        if (this._pack._stream === null) this._pack._stream = this;\n        const cb = this._openCallback;\n        this._openCallback = null;\n        if (cb === null) return;\n        if (this._pack.destroying) return cb(new Error(\"pack stream destroyed\"));\n        if (this._pack._finalized) return cb(new Error(\"pack stream is already finalized\"));\n        this._pack._stream = this;\n        if (!this._isLinkname) {\n            this._pack._encode(this.header);\n        }\n        if (this._isVoid) {\n            this._finish();\n            this._continuePack(null);\n        }\n        cb(null);\n    }\n    _write(data, cb) {\n        if (this._isLinkname) {\n            this._linkname = this._linkname ? b4a.concat([\n                this._linkname,\n                data\n            ]) : data;\n            return cb(null);\n        }\n        if (this._isVoid) {\n            if (data.byteLength > 0) {\n                return cb(new Error(\"No body allowed for this entry\"));\n            }\n            return cb();\n        }\n        this.written += data.byteLength;\n        if (this._pack.push(data)) return cb();\n        this._pack._drain = cb;\n    }\n    _finish() {\n        if (this._finished) return;\n        this._finished = true;\n        if (this._isLinkname) {\n            this.header.linkname = this._linkname ? b4a.toString(this._linkname, \"utf-8\") : \"\";\n            this._pack._encode(this.header);\n        }\n        overflow(this._pack, this.header.size);\n        this._pack._done(this);\n    }\n    _final(cb) {\n        if (this.written !== this.header.size) {\n            return cb(new Error(\"Size mismatch\"));\n        }\n        this._finish();\n        cb(null);\n    }\n    _getError() {\n        return getStreamError(this) || new Error(\"tar entry destroyed\");\n    }\n    _predestroy() {\n        this._pack.destroy(this._getError());\n    }\n    _destroy(cb) {\n        this._pack._done(this);\n        this._continuePack(this._finished ? null : this._getError());\n        cb();\n    }\n}\nclass Pack extends Readable {\n    constructor(opts){\n        super(opts);\n        this._drain = noop;\n        this._finalized = false;\n        this._finalizing = false;\n        this._pending = [];\n        this._stream = null;\n    }\n    entry(header, buffer, callback) {\n        if (this._finalized || this.destroying) throw new Error(\"already finalized or destroyed\");\n        if (typeof buffer === \"function\") {\n            callback = buffer;\n            buffer = null;\n        }\n        if (!callback) callback = noop;\n        if (!header.size || header.type === \"symlink\") header.size = 0;\n        if (!header.type) header.type = modeToType(header.mode);\n        if (!header.mode) header.mode = header.type === \"directory\" ? DMODE : FMODE;\n        if (!header.uid) header.uid = 0;\n        if (!header.gid) header.gid = 0;\n        if (!header.mtime) header.mtime = new Date();\n        if (typeof buffer === \"string\") buffer = b4a.from(buffer);\n        const sink = new Sink(this, header, callback);\n        if (b4a.isBuffer(buffer)) {\n            header.size = buffer.byteLength;\n            sink.write(buffer);\n            sink.end();\n            return sink;\n        }\n        if (sink._isVoid) {\n            return sink;\n        }\n        return sink;\n    }\n    finalize() {\n        if (this._stream || this._pending.length > 0) {\n            this._finalizing = true;\n            return;\n        }\n        if (this._finalized) return;\n        this._finalized = true;\n        this.push(END_OF_TAR);\n        this.push(null);\n    }\n    _done(stream) {\n        if (stream !== this._stream) return;\n        this._stream = null;\n        if (this._finalizing) this.finalize();\n        if (this._pending.length) this._pending.shift()._continueOpen();\n    }\n    _encode(header) {\n        if (!header.pax) {\n            const buf = headers.encode(header);\n            if (buf) {\n                this.push(buf);\n                return;\n            }\n        }\n        this._encodePax(header);\n    }\n    _encodePax(header) {\n        const paxHeader = headers.encodePax({\n            name: header.name,\n            linkname: header.linkname,\n            pax: header.pax\n        });\n        const newHeader = {\n            name: \"PaxHeader\",\n            mode: header.mode,\n            uid: header.uid,\n            gid: header.gid,\n            size: paxHeader.byteLength,\n            mtime: header.mtime,\n            type: \"pax-header\",\n            linkname: header.linkname && \"PaxHeader\",\n            uname: header.uname,\n            gname: header.gname,\n            devmajor: header.devmajor,\n            devminor: header.devminor\n        };\n        this.push(headers.encode(newHeader));\n        this.push(paxHeader);\n        overflow(this, paxHeader.byteLength);\n        newHeader.size = header.size;\n        newHeader.type = header.type;\n        this.push(headers.encode(newHeader));\n    }\n    _doDrain() {\n        const drain = this._drain;\n        this._drain = noop;\n        drain();\n    }\n    _predestroy() {\n        const err = getStreamError(this);\n        if (this._stream) this._stream.destroy(err);\n        while(this._pending.length){\n            const stream = this._pending.shift();\n            stream.destroy(err);\n            stream._continueOpen();\n        }\n        this._doDrain();\n    }\n    _read(cb) {\n        this._doDrain();\n        cb();\n    }\n}\nmodule.exports = function pack(opts) {\n    return new Pack(opts);\n};\nfunction modeToType(mode) {\n    switch(mode & constants.S_IFMT){\n        case constants.S_IFBLK:\n            return \"block-device\";\n        case constants.S_IFCHR:\n            return \"character-device\";\n        case constants.S_IFDIR:\n            return \"directory\";\n        case constants.S_IFIFO:\n            return \"fifo\";\n        case constants.S_IFLNK:\n            return \"symlink\";\n    }\n    return \"file\";\n}\nfunction noop() {}\nfunction overflow(self, size) {\n    size &= 511;\n    if (size) self.push(END_OF_TAR.subarray(0, 512 - size));\n}\nfunction mapWritable(buf) {\n    return b4a.isBuffer(buf) ? buf : b4a.from(buf);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tar-stream/pack.js\n");

/***/ })

};
;