import { NextRequest, NextResponse } from 'next/server'
import { readFile, writeFile, access } from 'fs/promises'
import { join } from 'path'
import { PhotoRoomService } from '@/lib/services/PhotoRoomService'
import {
  getUploadPath,
  ensureUploadDir,
  PUBLIC_ORIGIN,
  MAX_CONCURRENT_PHOTOROOM_REQUESTS,
  PHOTOROOM_MAX_RETRIES,
  PHOTOROOM_RETRY_DELAY
} from '@/lib/config'

interface ProcessRequest {
  sku: string
  files: Array<{
    id: string
    fileName: string
    filePath: string
    type: string
    originalName: string
  }>
}

interface ProcessResponse {
  success: boolean
  results: Array<{
    id: string
    originalName: string
    finalName: string
    status: 'done' | 'error' | 'skipped'
    error?: string
    previewUrl?: string
  }>
}

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ PhotoRoom
let activeRequests = 0

// –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ API route
export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json() as ProcessRequest
    const { sku, files } = body

    if (!sku || !files || files.length === 0) {
      return NextResponse.json(
        { error: 'SKU and files are required' },
        { status: 400 }
      )
    }

    console.log(`üîß Processing SKU: ${sku}, ${files.length} files`)

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PhotoRoomService
    let photoRoomService: PhotoRoomService
    try {
      photoRoomService = new PhotoRoomService()
      console.log('üîß PhotoRoomService initialized successfully')
    } catch (error) {
      console.error('‚ùå Failed to initialize PhotoRoomService:', error)
      return NextResponse.json(
        { error: 'PhotoRoom service initialization failed' },
        { status: 500 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è SKU
    const uploadDir = await ensureUploadDir(sku)

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const imageFiles = files.filter(file => file.type === 'image')
    const videoFiles = files.filter(file => file.type === 'video')

    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
    let fileCounter = 1
    const results: ProcessResponse['results'] = []

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ (–ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
    for (const videoFile of videoFiles) {
      const finalName = `${sku}_${String(fileCounter).padStart(3, '0')}.mp4`
      results.push({
        id: videoFile.id,
        originalName: videoFile.fileName,
        finalName: finalName,
        status: 'skipped'
      })
      fileCounter++
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º concurrent –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log(`üéØ Starting processing of ${imageFiles.length} image files...`)
    
    for (let i = 0; i < imageFiles.length; i += MAX_CONCURRENT_PHOTOROOM_REQUESTS) {
      const batch = imageFiles.slice(i, i + MAX_CONCURRENT_PHOTOROOM_REQUESTS)
      console.log(`üì¶ Processing batch ${Math.floor(i/MAX_CONCURRENT_PHOTOROOM_REQUESTS) + 1} with ${batch.length} files...`)
      
      // –ñ–¥–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      while (activeRequests >= MAX_CONCURRENT_PHOTOROOM_REQUESTS) {
        console.log('‚è≥ Waiting for active requests to complete...')
        await new Promise(resolve => setTimeout(resolve, 1000))
      }

      activeRequests++
      console.log(`üöÄ Active requests: ${activeRequests}`)

      const batchPromises = batch.map(async (file) => {
        try {
          console.log(`üîç Processing file: ${file.fileName}`)
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const currentFileCounter = fileCounter++
          const finalName = `${sku}_${String(currentFileCounter).padStart(3, '0')}.jpg`
          
          // –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
          const originalPath = getUploadPath(sku, file.fileName)
          const fileBuffer = await readFile(originalPath)
          console.log(`üì∏ Original file size: ${fileBuffer.length} bytes`)
          
          // –£–¥–∞–ª—è–µ–º —Ñ–æ–Ω —á–µ—Ä–µ–∑ PhotoRoom
          console.log('üöÄ Calling PhotoRoom API...')
          const processedBuffer = await photoRoomService.removeBackground(fileBuffer)
          console.log(`‚úÖ PhotoRoom processing completed, processed size: ${processedBuffer.length} bytes`)
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
          const processedPath = getUploadPath(sku, finalName)
          await writeFile(processedPath, processedBuffer)
          console.log(`‚úÖ Processed file saved to: ${processedPath}`)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
          await access(processedPath)
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è –ø—Ä–µ–≤—å—é
          const previewUrl = `${PUBLIC_ORIGIN}/uploads/${sku}/${finalName}`
          
          return {
            id: file.id,
            originalName: file.originalName,
            finalName: finalName,
            status: 'done' as const,
            previewUrl
          }
          
        } catch (error) {
          console.error(`‚ùå Error processing file ${file.fileName}:`, error)
          console.error(`‚ùå Error details:`, {
            name: error instanceof Error ? error.name : 'Unknown',
            message: error instanceof Error ? error.message : 'Unknown error',
            stack: error instanceof Error ? error.stack : undefined,
            fileName: file.fileName,
            originalName: file.originalName
          })
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—à–∏–±–∫–∏
          const currentFileCounter = fileCounter++
          const originalExtension = file.fileName.split('.').pop() || 'jpg'
          const errorFinalName = `${sku}_${String(currentFileCounter).padStart(3, '0')}.${originalExtension}`
          
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
          const previewUrl = `${PUBLIC_ORIGIN}/uploads/${sku}/${file.fileName}`
          
          return {
            id: file.id,
            originalName: file.originalName,
            finalName: errorFinalName,
            status: 'error' as const,
            error: error instanceof Error ? error.message : 'Unknown error',
            previewUrl
          }
        }
      })

      const batchResults = await Promise.all(batchPromises)
      results.push(...batchResults)
      
      activeRequests--
    }

    console.log(`‚úÖ Processing completed for SKU ${sku}: ${results.length} results`)

    return NextResponse.json({
      success: true,
      sku,
      results
    })

  } catch (error) {
    console.error('Process error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}