import { NextRequest, NextResponse } from 'next/server'
import { readFile, unlink, writeFile, open } from 'fs/promises'
import { join } from 'path'
import { PhotoRoomService } from '@/lib/services/PhotoRoomService'

interface ProcessRequest {
  sku: string
  files: Array<{
    id: string
    fileName: string
    filePath: string
    type: string
    originalName: string
  }>
}

interface ProcessResponse {
  success: boolean
  results: Array<{
    id: string
    originalName: string
    finalName: string
    status: 'done' | 'error' | 'skipped'
    error?: string
    processedPath?: string
  }>
}

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ PhotoRoom
const MAX_CONCURRENT_REQUESTS = 5
let activeRequests = 0

// –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ API route
export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json() as ProcessRequest
    const { sku, files } = body

    if (!sku || !files || files.length === 0) {
      return NextResponse.json(
        { error: 'SKU and files are required' },
        { status: 400 }
      )
    }

    console.log('üîß Initializing PhotoRoomService...')
    let photoRoomService: PhotoRoomService
    let results: ProcessResponse['results'] = []
    
    try {
      photoRoomService = new PhotoRoomService()
      console.log('üîß PhotoRoomService initialized successfully')
    } catch (error) {
      console.error('‚ùå Failed to initialize PhotoRoomService:', error)
      return NextResponse.json(
        { error: 'PhotoRoom service initialization failed' },
        { status: 500 }
      )
    }
    
    console.log('üîë PhotoRoom token status check completed')

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const imageFiles = files.filter(file => file.type === 'image')
    const videoFiles = files.filter(file => file.type === 'video')

    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
    const totalFiles = imageFiles.length + videoFiles.length
    let fileCounter = 1
    
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö
    const processedFiles: {
      originalPath: string;
      processedPath: string;
      type: 'image' | 'video';
    }[] = []

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ (–ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
    for (const videoFile of videoFiles) {
      const finalName = `${sku}_${String(fileCounter).padStart(3, '0')}.mp4`
      results.push({
        id: videoFile.id,
        originalName: videoFile.fileName,
        finalName: finalName,
        status: 'skipped'
      })
      fileCounter++
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º concurrent –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log(`üéØ Starting processing of ${imageFiles.length} image files...`)
    
    for (let i = 0; i < imageFiles.length; i += MAX_CONCURRENT_REQUESTS) {
      const batch = imageFiles.slice(i, i + MAX_CONCURRENT_REQUESTS)
      console.log(`üì¶ Processing batch ${Math.floor(i/MAX_CONCURRENT_REQUESTS) + 1} with ${batch.length} files...`)
      
      // –ñ–¥–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      while (activeRequests >= MAX_CONCURRENT_REQUESTS) {
        console.log('‚è≥ Waiting for active requests to complete...')
        await new Promise(resolve => setTimeout(resolve, 1000))
      }

      activeRequests++
      console.log(`üöÄ Active requests: ${activeRequests}`)

      const batchPromises = batch.map(async (file) => {
        try {
          console.log(`üîç Processing file: ${file.fileName}`)
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
          const currentFileCounter = fileCounter++
          
          // PhotoRoom –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JPG —Ñ–æ—Ä–º–∞—Ç
          const finalName = `${sku}_${String(currentFileCounter).padStart(3, '0')}.jpg`
          console.log(`üìù Generated final name: ${finalName}`)
          
          // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          const baseUploadDir = process.env.RAILWAY_SERVICE_NAME ? '/tmp/uploads' : './uploads'
          const uploadDir = join(baseUploadDir, sku)
          const filePath = join(uploadDir, file.fileName)
          const fileBuffer = await readFile(filePath)
          
          console.log(`üì∏ Sending file to PhotoRoom: ${file.fileName}, size: ${fileBuffer.length} bytes`)
          
          // –£–¥–∞–ª—è–µ–º —Ñ–æ–Ω —á–µ—Ä–µ–∑ PhotoRoom
          console.log('üöÄ Calling PhotoRoom API...')
          const processedBuffer = await photoRoomService.removeBackground(fileBuffer)
          
          console.log(`‚úÖ PhotoRoom processing completed for: ${file.fileName}, processed size: ${processedBuffer.length} bytes`)
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ç—É –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          const processedPath = join(uploadDir, finalName)
          await writeFile(processedPath, processedBuffer)
          
          console.log(`Processed file saved to: ${processedPath}`)
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
          processedFiles.push({
            originalPath: filePath,
            processedPath: processedPath,
            type: 'image'
          })
          
          return {
            id: file.id,
            originalName: file.originalName, // <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            finalName: finalName,
            status: 'done' as const,
            processedPath,
            url: `/api/images/${sku}/${finalName}`
          }
          
        } catch (error) {
          console.error(`‚ùå Error processing file ${file.fileName}:`, error)
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—à–∏–±–∫–∏
          const currentFileCounter = fileCounter++
          
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
          const originalExtension = file.fileName.split('.').pop() || 'jpg'
          const errorFinalName = `${sku}_${String(currentFileCounter).padStart(3, '0')}.${originalExtension}`
          
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
          const baseUploadDir = process.env.RAILWAY_SERVICE_NAME ? '/tmp/uploads' : './uploads'
          return {
            id: file.id,
            originalName: file.originalName,
            finalName: errorFinalName,
            status: 'error' as const,
            error: error instanceof Error ? error.message : 'Unknown error',
            processedPath: join(baseUploadDir, sku, file.fileName),
            url: `/api/images/${sku}/${file.fileName}`
          }
        }
      })

      const batchResults = await Promise.all(batchPromises)
      results.push(...batchResults)
      
      activeRequests--
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–µ –∏ —Ñ–∞–π–ª–∞—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const baseUploadDir = process.env.RAILWAY_SERVICE_NAME ? '/tmp/uploads' : './uploads'
    const uploadDir = join(baseUploadDir, sku)
    const processInfoPath = join(uploadDir, `${sku}-process-info.json`)
    
    const processInfo = {
      results,
      processedFiles
    }
    
    console.log(`Writing process info to: ${processInfoPath}`)
    console.log(`Process info contains ${processedFiles.length} processed files`)
    
    await writeFile(processInfoPath, JSON.stringify(processInfo, null, 2))
    console.log(`Process info saved successfully`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω
    try {
      const savedContent = await readFile(processInfoPath, 'utf-8')
      console.log(`Process info file size: ${savedContent.length} bytes`)
      console.log(`Process info preview: ${savedContent.substring(0, 200)}...`)
    } catch (error) {
      console.error(`Error reading saved process info:`, error)
    }

    return NextResponse.json({
      success: true,
      results,
      sku
    })

  } catch (error) {
    console.error('Process error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}