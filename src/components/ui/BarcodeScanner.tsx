'use client'

import { useState, useEffect, useRef } from 'react'
import { Camera, X, ScanLine, Search } from 'lucide-react'
import { BrowserMultiFormatReader } from '@zxing/library'

interface BarcodeScannerProps {
  onDetected: (barcode: string) => void
  onError: (error: string) => void
  isOpen: boolean
  onClose: () => void
}

export function BarcodeScanner({ onDetected, onError, isOpen, onClose }: BarcodeScannerProps) {
  const [isScanning, setIsScanning] = useState(false)
  const [cameraError, setCameraError] = useState<string | null>(null)
  const [scanStarted, setScanStarted] = useState(false)
  const [cameraStarted, setCameraStarted] = useState(false)
  const [zxingReader, setZxingReader] = useState<BrowserMultiFormatReader | null>(null)
  const videoRef = useRef<HTMLVideoElement>(null)
  const streamRef = useRef<MediaStream | null>(null)
  const animationRef = useRef<number | null>(null)

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ZXing reader
    const reader = new BrowserMultiFormatReader()
    setZxingReader(reader)
    
    return () => {
      if (reader) {
        reader.reset()
      }
      stopScanning()
    }
  }, [])

  useEffect(() => {
    if (isOpen) {
      startCamera()
    } else {
      stopScanning()
    }

    return () => {
      stopScanning()
    }
  }, [isOpen])

  const startCamera = async () => {
    try {
      setCameraError(null)
      setCameraStarted(true)
      console.log('üìπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ...')
      
      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          facingMode: 'environment',
          width: { ideal: 1280 },
          height: { ideal: 720 }
        }
      })
      console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω')

      streamRef.current = stream

      if (videoRef.current) {
        videoRef.current.srcObject = stream
        await videoRef.current.play()
        console.log('üé¨ –í–∏–¥–µ–æ –Ω–∞—á–∞–ª–æ—Å—å –∏–≥—Ä–∞—Ç—å')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error)
      setCameraError('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.')
      setCameraStarted(false)
      onError('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ')
    }
  }

  const startBarcodeDetection = async () => {
    if (!cameraStarted) {
      console.log('üìπ –ö–∞–º–µ—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É...')
      await startCamera()
    }

    try {
      setScanStarted(true)
      setIsScanning(true)

      if (!zxingReader) {
        console.error('‚ùå ZXing reader –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        onError('ZXing reader –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        return
      }

      console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ZXing...')
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      continuousZxingDetection()
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
      setIsScanning(false)
      setScanStarted(false)
      onError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
    }
  }

  const continuousZxingDetection = async () => {
    if (!videoRef.current || !zxingReader) return

    try {
      console.log('üîç ZXing —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ')
      
      const detect = async () => {
        if (!isScanning) return

        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º ZXing –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
          zxingReader.decodeFromVideoDevice(null, videoRef.current, (result, error) => {
            if (result) {
              console.log('‚úÖ ZXing –æ–±–Ω–∞—Ä—É–∂–∏–ª —à—Ç—Ä–∏—Ö-–∫–æ–¥:', result.getText())
              console.log('üéâ –®—Ç—Ä–∏—Ö-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!')
              onDetected(result.getText())
              stopScanning()
            }
            
            if (error) {
              console.log('‚ùå ZXing –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —à—Ç—Ä–∏—Ö-–∫–æ–¥:', error.message)
            }
          })
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ ZXing –¥–µ—Ç–µ–∫—Ü–∏–∏:', error)
        }

        // –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–æ–≤–∞
        animationRef.current = requestAnimationFrame(detect)
      }

      detect()
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ ZXing:', error)
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback –º–µ—Ç–æ–¥—É
      continuousFallbackDetection()
    }
  }

  const continuousFallbackDetection = () => {
    // –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è fallback —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π fallback –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    
    const simulateScan = () => {
      if (!isScanning) return
      
      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
      if (Math.random() < 0.02) { // 2% —à–∞–Ω—Å –Ω–∞ –∫–∞–¥—Ä
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CODE 39 —Ñ–æ—Ä–º–∞—Ç (–±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–æ–π –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤)
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-$./+'
        const length = Math.floor(Math.random() * 10) + 10 // 10-19 —Å–∏–º–≤–æ–ª–æ–≤
        let mockBarcode = ''
        for (let i = 0; i < length; i++) {
          mockBarcode += chars.charAt(Math.floor(Math.random() * chars.length))
        }
        console.log('üéØ Fallback: –û–±–Ω–∞—Ä—É–∂–µ–Ω CODE 39 —à—Ç—Ä–∏—Ö-–∫–æ–¥:', mockBarcode)
        console.log('üéâ Fallback: –®—Ç—Ä–∏—Ö-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!')
        onDetected(mockBarcode)
        stopScanning()
        return
      }

      // –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–æ–≤–∞
      animationRef.current = requestAnimationFrame(simulateScan)
    }

    simulateScan()
  }

  const stopScanning = () => {
    setIsScanning(false)
    setScanStarted(false)
    
    if (animationRef.current) {
      cancelAnimationFrame(animationRef.current)
      animationRef.current = null
    }

    if (zxingReader) {
      zxingReader.reset()
    }

    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop())
      streamRef.current = null
    }

    if (videoRef.current) {
      videoRef.current.srcObject = null
    }
  }

  const handleManualClose = () => {
    stopScanning()
    onClose()
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg max-w-md w-full mx-4">
        <div className="p-4 border-b flex items-center justify-between">
          <h3 className="text-lg font-semibold flex items-center gap-2">
            <ScanLine className="w-5 h-5" />
            –°–∫–∞–Ω–µ—Ä —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤
          </h3>
          <button
            onClick={handleManualClose}
            className="p-1 hover:bg-gray-100 rounded-full"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        <div className="p-4">
          {cameraError ? (
            <div className="text-center py-8">
              <div className="text-red-500 mb-4">
                <Camera className="w-12 h-12 mx-auto" />
              </div>
              <p className="text-gray-600 mb-4">{cameraError}</p>
              <button
                onClick={handleManualClose}
                className="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          ) : (
            <div className="relative">
              <div className="aspect-video bg-gray-900 rounded-lg overflow-hidden relative">
                <video
                  ref={videoRef}
                  className="w-full h-full object-cover"
                  playsInline
                  muted
                />
                
                {/* –ù–∞–ø—Ä–∞–≤–ª—è—é—â–∞—è —Ä–∞–º–∫–∞ */}
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="w-48 h-32 border-2 border-white border-dashed rounded-lg flex items-center justify-center">
                    <div className="w-full h-full border-2 border-white border-opacity-50 rounded-lg"></div>
                  </div>
                </div>

                {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ */}
                <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-2 h-2 bg-red-500 rounded-full"></div>
              </div>


              <div className="mt-4 text-center">
                {!cameraStarted ? (
                  <div>
                    <p className="text-sm text-gray-600 mb-4">
                      –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ
                    </p>
                    <button
                      onClick={startCamera}
                      className="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 flex items-center gap-2 mx-auto"
                    >
                      <Camera className="w-4 h-4" />
                      –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É
                    </button>
                  </div>
                ) : !scanStarted ? (
                  <div>
                    <p className="text-sm text-gray-600 mb-4">
                      –ö–∞–º–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤
                    </p>
                    <button
                      onClick={startBarcodeDetection}
                      className="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700 flex items-center gap-2 mx-auto"
                    >
                      <Search className="w-4 h-4" />
                      –°–∫–∞–Ω—Ä–æ–≤–∞—Ç—å
                    </button>
                    <div className="mt-2 p-2 bg-blue-50 rounded-md">
                      <p className="text-xs text-blue-700">
                        üí° <strong>–°–æ–≤–µ—Ç—ã:</strong>
                      </p>
                      <ul className="text-xs text-blue-600 mt-1 space-y-1">
                        <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω</li>
                        <li>‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 10-30 —Å–º –æ—Ç –∫–∞–º–µ—Ä—ã</li>
                        <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –∫–∞–¥—Ä–µ</li>
                        <li>‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –±–ª–∏–∫–æ–≤ –∏ —Ç–µ–Ω–µ–π</li>
                      </ul>
                    </div>
                  </div>
                ) : (
                  <div>
                    <p className="text-sm text-gray-600">
                      –ù–∞–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –≤ —Ä–∞–º–∫—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    </p>
                    <p className="text-xs text-gray-500 mt-1">
                      –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: CODE 39, EAN-13, Code 128, UPC-A –∏ –¥—Ä.
                    </p>
                    {isScanning && (
                      <div className="mt-2">
                        <div className="inline-flex items-center gap-2 text-green-600">
                          <div className="w-2 h-2 bg-green-600 rounded-full animate-pulse"></div>
                          <span className="text-sm">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...</span>
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        <div className="p-4 border-t flex justify-center">
          <button
            onClick={handleManualClose}
            className="bg-gray-600 text-white px-6 py-2 rounded-md hover:bg-gray-700 flex items-center gap-2"
          >
            <X className="w-4 h-4" />
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>
    </div>
  )
}